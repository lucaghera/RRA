[*
 * Robotics Runtime Adaptation Toolchain
 * 
 * Copyright (c) 2014
 * All rights reserved.
 * 
 * Luca Gherardi
 * Instititute for Dynamic Systems and Control
 * ETH Zurich
 * 
 * Nico Hochgeschwender
 * Department of Computer Science
 * Bonn-Rhine-Sieg University of Applied Sciences
 * 
 * ***********************************************************************************************
 * 
 * Authors: 
 *    <A HREF="mailto:lucagh@ethz.ch">Luca Gherardi</A>
 *    <A HREF="mailto:nico.hochgeschwender@h-brs.de">Nico Hochgeschwender</A>
 * 
 * 
 * ***********************************************************************************************
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * 
 *]

#include "ros/ros.h"
[%
var cdmHelper = new Native("org.rra.cdmModel.m2t.tools.ContextMonitorTools");
var includes : Sequence := cdmHelper.getIncludes(cdmModel);

for(include in includes) {
%]
#include "[%=include%]"
[%
}


for(cdm in cdmModel.cdms) {
%]

// [%=cdm.name%] publisher and subscriber
ros::Publisher [%=cdm.name%]_pub;
ros::Subscriber [%=cdm.name%]_sub;
[%
}
%]

// Define global variables
[%=out.startPreserve("/*", "*/", "user implementation of globale variables", true)%]
[%=out.stopPreserve()%]

[%
var functions : Sequence := cdmHelper.getRosMsgFunctions(cdmModel);

for(fun in functions) {
%]
void [%=fun.name%](const [%=fun.inputParameter.msgs_package%]::[%=fun.inputParameter.name%]::ConstPtr& input,
					 [%=fun.outputParameter.msgs_package%]::[%=fun.outputParameter.name%]& output){

	// Write your code between the following commnets
	[%=out.startPreserve("/*", "*/", "user implementation of function", true)%]
	[%=out.stopPreserve()%]

}
[%
}

for(cdm in cdmModel.cdms) {
	if(cdm.isTypeOf(ROSContextDependentMeasurement)){
		var inputDataType : DataType := cdm.inputDataType;
		//var inputDataType : DataType := cdm.topic.dataType;
		var outputDataType : DataType;
		
		if(cdm.cdmFunction.isDefined()){
			outputDataType = cdm.cdmFunction.outputParameter;
		}else{
			outputDataType = cdm.inputDataType;
		}
%]

void [%=cdm.name%]_callback(const [%=inputDataType.msgs_package%]::[%=inputDataType.name%]::ConstPtr& input){

	[%=outputDataType.msgs_package%]::[%=outputDataType.name%] output;
	
	// User code
	[%=out.startPreserve("/*", "*/", "user code", true)%]
	[%=out.stopPreserve()%]

[%
		if(cdm.cdmFunction.isDefined()){
%]
	[%=cdm.cdmFunction.name%](input, output);
[%
		}else{
%]
	output.data = input->data;
[%	
	}
%]
	
	// User code
	[%=out.startPreserve("/*", "*/", "user code", true)%]
	[%=out.stopPreserve()%]
	
	[%=cdm.name%]_pub.publish(output);	

}
[%
	}
}

%]



int main(int argc, char** argv){

	ros::init(argc, argv, "[%=cdmModel.name%]");
	
	ros::NodeHandle nodeHandle;
	
[%
for(cdm in cdmModel.cdms) {
	if(cdm.isTypeOf(ROSContextDependentMeasurement)){
		var outputDataType : DataType;
		if(cdm.cdmFunction.isDefined()){
			outputDataType = cdm.cdmFunction.outputParameter;
		}else{
			outputDataType = cdm.inputDataType;
		}
%]
	[%=cdm.name%]_pub = nodeHandle.advertise<[%=outputDataType.msgs_package%]::[%=outputDataType.name%]>("[%=cdm.name%]",1000);
	[%=cdm.name%]_sub = nodeHandle.subscribe("[%=cdm.topic.name%]", 1000, [%=cdm.name%]_callback);
[%
	}
}
%]
	
	ros::spin();
	
	return 0;

}