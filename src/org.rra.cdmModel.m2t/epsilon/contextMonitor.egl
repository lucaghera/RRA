[*
 * Robotics Runtime Adaptation Toolchain
 * 
 * Copyright (c) 2014
 * All rights reserved.
 * 
 * Luca Gherardi
 * Instititute for Dynamic Systems and Control
 * ETH Zurich
 * 
 * Nico Hochgeschwender
 * Department of Computer Science
 * Bonn-Rhine-Sieg University of Applied Sciences
 * 
 * ***********************************************************************************************
 * 
 * Authors: 
 *    <A HREF="mailto:lucagh@ethz.ch">Luca Gherardi</A>
 *    <A HREF="mailto:nico.hochgeschwender@h-brs.de">Nico Hochgeschwender</A>
 * 
 * 
 * ***********************************************************************************************
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * 
 *]

#include "ros/ros.h"
[%
for(cdm in cdmModel.cdms) {
	if(cdm.inputDataType.isTypeOf(ROSMsgDataType)){
%]
#include "[%=cdm.inputDataType.msgs_package%]/[%=cdm.inputDataType.name%].h"
[%
	}
	if(cdm.cdmFunction.isDefined()){
		if(cdm.cdmFunction.ouput.isTypeOf(ROSMsgDataType)){
%]
#include "[%=cdm.cdmFunction.ouput.msgs_package%]/[%=cdm.cdmFunction.ouput.name%].h"
[%		
		}
	}
}

for(cdm in cdmModel.cdms) {
%]
// [%=cdm.name%] publisher and subscriber
ros::Publisher [%=cdm.name%]_pub;
ros::Subscriber [%=cdm.name%]_sub;

[%
}
%]

[%
for(cdm in cdmModel.cdms) {
	if(cdm.isTypeOf(ROSContextDependentMeasurement)){
		var dataType : DataType;
		var publisher : NodeMsgProducer := cdm.publisher;
		if(cdm.cdmFunction.isDefined()){
			dataType = cdm.cdmFunction.ouput;
		}else{
			dataType = cdm.inputDataType;
		}
%]

void [%=cdm.name%]_callback(const [%=dataType.msgs_package%]::[%=dataType.name%]::ConstPtr& msg){

	[%=dataType.msgs_package%]::[%=dataType.name%] output;
		
[%
		if(cdm.cdmFunction.isDefined()){
%]
	output.data = msg->data.[%=cdm.cdmFunction.name%]();
	
[%
		}else{
%]
	output.data = msg->data;
[%	
	}
%]
	[%=cdm.name%]_pub.publish(output);
	
}
[%
	}
}
%]

int main(int argc, char** argv){

	ros::init(argc, argv, "[%=cdmModel.name%]");
	
	ros::NodeHandle nodeHandle;
	
[%
for(cdm in cdmModel.cdms) {
	if(cdm.isTypeOf(ROSContextDependentMeasurement)){
		var dataType : DataType;
		var publisher : NodeMsgProducer := cdm.publisher;
		if(cdm.cdmFunction.isDefined()){
			dataType = cdm.cdmFunction.ouput;
		}else{
			dataType = cdm.inputDataType;
		}
%]
	[%=cdm.name%]_pub = nodeHandle.advertise<[%=dataType.msgs_package%]::[%=dataType.name%]>("[%=cdm.name%]",1000);
	[%=cdm.name%]_sub = nodeHandle.subscribe("[%=publisher.topicName%]", 1000, [%=cdm.name%]_callback);
[%
	}
}
%]
	
	ros::spin();
	
	return 0;

}