/*
* generated by Xtext
*/
package org.rra.adaptationModel.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.rra.adaptationModel.services.AdaptationModelDSLGrammarAccess;

public class AdaptationModelDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private AdaptationModelDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.rra.adaptationModel.ui.contentassist.antlr.internal.InternalAdaptationModelDSLParser createParser() {
		org.rra.adaptationModel.ui.contentassist.antlr.internal.InternalAdaptationModelDSLParser result = new org.rra.adaptationModel.ui.contentassist.antlr.internal.InternalAdaptationModelDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAdaptationRuleAccess().getAlternatives(), "rule__AdaptationRule__Alternatives");
					put(grammarAccess.getOPERATORAccess().getAlternatives(), "rule__OPERATOR__Alternatives");
					put(grammarAccess.getLOGICAL_OPERATORAccess().getAlternatives(), "rule__LOGICAL_OPERATOR__Alternatives");
					put(grammarAccess.getAtomicActionAccess().getAlternatives_0(), "rule__AtomicAction__Alternatives_0");
					put(grammarAccess.getQueryOperatorAccess().getAlternatives(), "rule__QueryOperator__Alternatives");
					put(grammarAccess.getAttributeValueAccess().getAlternatives(), "rule__AttributeValue__Alternatives");
					put(grammarAccess.getAdaptationModelAccess().getGroup(), "rule__AdaptationModel__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getRuleAccess().getGroup_3(), "rule__Rule__Group_3__0");
					put(grammarAccess.getRuleAccess().getGroup_5(), "rule__Rule__Group_5__0");
					put(grammarAccess.getRuleAccess().getGroup_5_1(), "rule__Rule__Group_5_1__0");
					put(grammarAccess.getRuleWithPriorityAccess().getGroup(), "rule__RuleWithPriority__Group__0");
					put(grammarAccess.getRuleSetAccess().getGroup(), "rule__RuleSet__Group__0");
					put(grammarAccess.getMeasurementComparisonAccess().getGroup(), "rule__MeasurementComparison__Group__0");
					put(grammarAccess.getAtomicActionAccess().getGroup(), "rule__AtomicAction__Group__0");
					put(grammarAccess.getQueryActionAccess().getGroup(), "rule__QueryAction__Group__0");
					put(grammarAccess.getSelectActionAccess().getGroup(), "rule__SelectAction__Group__0");
					put(grammarAccess.getDeselectActionAccess().getGroup(), "rule__DeselectAction__Group__0");
					put(grammarAccess.getModifyAttributeAccess().getGroup(), "rule__ModifyAttribute__Group__0");
					put(grammarAccess.getAdaptationModelAccess().getImportsAssignment_0(), "rule__AdaptationModel__ImportsAssignment_0");
					put(grammarAccess.getAdaptationModelAccess().getNameAssignment_2(), "rule__AdaptationModel__NameAssignment_2");
					put(grammarAccess.getAdaptationModelAccess().getFrequencyAssignment_5(), "rule__AdaptationModel__FrequencyAssignment_5");
					put(grammarAccess.getAdaptationModelAccess().getAdaptationRulesAssignment_7(), "rule__AdaptationModel__AdaptationRulesAssignment_7");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
					put(grammarAccess.getRuleAccess().getConditionAssignment_3_2(), "rule__Rule__ConditionAssignment_3_2");
					put(grammarAccess.getRuleAccess().getAtomicActionAssignment_4(), "rule__Rule__AtomicActionAssignment_4");
					put(grammarAccess.getRuleAccess().getConditionAssignment_5_1_2(), "rule__Rule__ConditionAssignment_5_1_2");
					put(grammarAccess.getRuleAccess().getAtomicActionAssignment_5_2(), "rule__Rule__AtomicActionAssignment_5_2");
					put(grammarAccess.getRuleWithPriorityAccess().getPriorityValueAssignment_1(), "rule__RuleWithPriority__PriorityValueAssignment_1");
					put(grammarAccess.getRuleWithPriorityAccess().getRuleAssignment_2(), "rule__RuleWithPriority__RuleAssignment_2");
					put(grammarAccess.getRuleSetAccess().getNameAssignment_1(), "rule__RuleSet__NameAssignment_1");
					put(grammarAccess.getRuleSetAccess().getRulesAssignment_3(), "rule__RuleSet__RulesAssignment_3");
					put(grammarAccess.getConditionAccess().getMeasurementComparisonAssignment(), "rule__Condition__MeasurementComparisonAssignment");
					put(grammarAccess.getMeasurementComparisonAccess().getMeasurementAssignment_0(), "rule__MeasurementComparison__MeasurementAssignment_0");
					put(grammarAccess.getMeasurementComparisonAccess().getValueAssignment_2(), "rule__MeasurementComparison__ValueAssignment_2");
					put(grammarAccess.getQueryActionAccess().getFeatureAssignment_3(), "rule__QueryAction__FeatureAssignment_3");
					put(grammarAccess.getQueryActionAccess().getValueAssignment_8(), "rule__QueryAction__ValueAssignment_8");
					put(grammarAccess.getSelectActionAccess().getFeatureAssignment_2(), "rule__SelectAction__FeatureAssignment_2");
					put(grammarAccess.getDeselectActionAccess().getFeatureAssignment_2(), "rule__DeselectAction__FeatureAssignment_2");
					put(grammarAccess.getModifyAttributeAccess().getFeatureAttributeAssignment_2(), "rule__ModifyAttribute__FeatureAttributeAssignment_2");
					put(grammarAccess.getModifyAttributeAccess().getAttributeValueAssignment_6(), "rule__ModifyAttribute__AttributeValueAssignment_6");
					put(grammarAccess.getStringAttributeValueAccess().getValueAssignment(), "rule__StringAttributeValue__ValueAssignment");
					put(grammarAccess.getNFRAttributeValueAccess().getValueAssignment(), "rule__NFRAttributeValue__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.rra.adaptationModel.ui.contentassist.antlr.internal.InternalAdaptationModelDSLParser typedParser = (org.rra.adaptationModel.ui.contentassist.antlr.internal.InternalAdaptationModelDSLParser) parser;
			typedParser.entryRuleAdaptationModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AdaptationModelDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AdaptationModelDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
