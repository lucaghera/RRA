/*
* generated by Xtext
*/
grammar InternalAdaptationModelDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.rra.adaptationModel.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.rra.adaptationModel.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.rra.adaptationModel.services.AdaptationModelDSLGrammarAccess;

}

@parser::members {
 
 	private AdaptationModelDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AdaptationModelDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleAdaptationModel
entryRuleAdaptationModel 
:
{ before(grammarAccess.getAdaptationModelRule()); }
	 ruleAdaptationModel
{ after(grammarAccess.getAdaptationModelRule()); } 
	 EOF 
;

// Rule AdaptationModel
ruleAdaptationModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdaptationModelAccess().getGroup()); }
(rule__AdaptationModel__Group__0)
{ after(grammarAccess.getAdaptationModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard 
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
(rule__QualifiedNameWithWildcard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getGroup()); }
(rule__Condition__Group__0)
{ after(grammarAccess.getConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOPERATOR
entryRuleOPERATOR 
:
{ before(grammarAccess.getOPERATORRule()); }
	 ruleOPERATOR
{ after(grammarAccess.getOPERATORRule()); } 
	 EOF 
;

// Rule OPERATOR
ruleOPERATOR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOPERATORAccess().getAlternatives()); }
(rule__OPERATOR__Alternatives)
{ after(grammarAccess.getOPERATORAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLOGICAL_OPERATOR
entryRuleLOGICAL_OPERATOR 
:
{ before(grammarAccess.getLOGICAL_OPERATORRule()); }
	 ruleLOGICAL_OPERATOR
{ after(grammarAccess.getLOGICAL_OPERATORRule()); } 
	 EOF 
;

// Rule LOGICAL_OPERATOR
ruleLOGICAL_OPERATOR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLOGICAL_OPERATORAccess().getAlternatives()); }
(rule__LOGICAL_OPERATOR__Alternatives)
{ after(grammarAccess.getLOGICAL_OPERATORAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleAVG
entryRuleAVG 
:
{ before(grammarAccess.getAVGRule()); }
	 ruleAVG
{ after(grammarAccess.getAVGRule()); } 
	 EOF 
;

// Rule AVG
ruleAVG
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAVGAccess().getGroup()); }
(rule__AVG__Group__0)
{ after(grammarAccess.getAVGAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMIN
entryRuleMIN 
:
{ before(grammarAccess.getMINRule()); }
	 ruleMIN
{ after(grammarAccess.getMINRule()); } 
	 EOF 
;

// Rule MIN
ruleMIN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMINAccess().getGroup()); }
(rule__MIN__Group__0)
{ after(grammarAccess.getMINAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMAX
entryRuleMAX 
:
{ before(grammarAccess.getMAXRule()); }
	 ruleMAX
{ after(grammarAccess.getMAXRule()); } 
	 EOF 
;

// Rule MAX
ruleMAX
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMAXAccess().getGroup()); }
(rule__MAX__Group__0)
{ after(grammarAccess.getMAXAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicAction
entryRuleAtomicAction 
:
{ before(grammarAccess.getAtomicActionRule()); }
	 ruleAtomicAction
{ after(grammarAccess.getAtomicActionRule()); } 
	 EOF 
;

// Rule AtomicAction
ruleAtomicAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicActionAccess().getAlternatives()); }
(rule__AtomicAction__Alternatives)
{ after(grammarAccess.getAtomicActionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectAction
entryRuleSelectAction 
:
{ before(grammarAccess.getSelectActionRule()); }
	 ruleSelectAction
{ after(grammarAccess.getSelectActionRule()); } 
	 EOF 
;

// Rule SelectAction
ruleSelectAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectActionAccess().getGroup()); }
(rule__SelectAction__Group__0)
{ after(grammarAccess.getSelectActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeselectAction
entryRuleDeselectAction 
:
{ before(grammarAccess.getDeselectActionRule()); }
	 ruleDeselectAction
{ after(grammarAccess.getDeselectActionRule()); } 
	 EOF 
;

// Rule DeselectAction
ruleDeselectAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeselectActionAccess().getGroup()); }
(rule__DeselectAction__Group__0)
{ after(grammarAccess.getDeselectActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModifyAttribute
entryRuleModifyAttribute 
:
{ before(grammarAccess.getModifyAttributeRule()); }
	 ruleModifyAttribute
{ after(grammarAccess.getModifyAttributeRule()); } 
	 EOF 
;

// Rule ModifyAttribute
ruleModifyAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModifyAttributeAccess().getGroup()); }
(rule__ModifyAttribute__Group__0)
{ after(grammarAccess.getModifyAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__OPERATOR__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOPERATORAccess().getSMALLERTerminalRuleCall_0()); }
	RULE_SMALLER
{ after(grammarAccess.getOPERATORAccess().getSMALLERTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOPERATORAccess().getBIGGERTerminalRuleCall_1()); }
	RULE_BIGGER
{ after(grammarAccess.getOPERATORAccess().getBIGGERTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getOPERATORAccess().getEQUALTerminalRuleCall_2()); }
	RULE_EQUAL
{ after(grammarAccess.getOPERATORAccess().getEQUALTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LOGICAL_OPERATOR__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLOGICAL_OPERATORAccess().getANDTerminalRuleCall_0()); }
	RULE_AND
{ after(grammarAccess.getLOGICAL_OPERATORAccess().getANDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLOGICAL_OPERATORAccess().getORTerminalRuleCall_1()); }
	RULE_OR
{ after(grammarAccess.getLOGICAL_OPERATORAccess().getORTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicAction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicActionAccess().getSelectActionParserRuleCall_0()); }
	ruleSelectAction
{ after(grammarAccess.getAtomicActionAccess().getSelectActionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicActionAccess().getDeselectActionParserRuleCall_1()); }
	ruleDeselectAction
{ after(grammarAccess.getAtomicActionAccess().getDeselectActionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomicActionAccess().getModifyAttributeParserRuleCall_2()); }
	ruleModifyAttribute
{ after(grammarAccess.getAtomicActionAccess().getModifyAttributeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__AdaptationModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdaptationModel__Group__0__Impl
	rule__AdaptationModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptationModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptationModelAccess().getImportsAssignment_0()); }
(rule__AdaptationModel__ImportsAssignment_0)*
{ after(grammarAccess.getAdaptationModelAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdaptationModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdaptationModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptationModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptationModelAccess().getRulesAssignment_1()); }
(rule__AdaptationModel__RulesAssignment_1)*
{ after(grammarAccess.getAdaptationModelAccess().getRulesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getIMPORT_TERMINALTerminalRuleCall_0()); }
	RULE_IMPORT_TERMINAL
{ after(grammarAccess.getImportAccess().getIMPORT_TERMINALTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getQualifiedNameWithWildcardParserRuleCall_1()); }
	ruleQualifiedNameWithWildcard
{ after(grammarAccess.getImportAccess().getQualifiedNameWithWildcardParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__2__Impl
	rule__Import__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getASTerminalRuleCall_2()); }
	RULE_AS
{ after(grammarAccess.getImportAccess().getASTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getNameAssignment_3()); }
(rule__Import__NameAssignment_3)
{ after(grammarAccess.getImportAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__QualifiedNameWithWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
(
	'.*' 
)?
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRULE_TERMINALTerminalRuleCall_0()); }
	RULE_RULE_TERMINAL
{ after(grammarAccess.getRuleAccess().getRULE_TERMINALTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNameAssignment_1()); }
(rule__Rule__NameAssignment_1)
{ after(grammarAccess.getRuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getRuleAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getIFTerminalRuleCall_3()); }
	RULE_IF
{ after(grammarAccess.getRuleAccess().getIFTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getConditionAssignment_4()); }
(rule__Rule__ConditionAssignment_4)
{ after(grammarAccess.getRuleAccess().getConditionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__5__Impl
	rule__Rule__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getTHENTerminalRuleCall_5()); }
	RULE_THEN
{ after(grammarAccess.getRuleAccess().getTHENTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__6__Impl
	rule__Rule__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRuleAccess().getAtomicActionAssignment_6()); }
(rule__Rule__AtomicActionAssignment_6)
{ after(grammarAccess.getRuleAccess().getAtomicActionAssignment_6()); }
)
(
{ before(grammarAccess.getRuleAccess().getAtomicActionAssignment_6()); }
(rule__Rule__AtomicActionAssignment_6)*
{ after(grammarAccess.getRuleAccess().getAtomicActionAssignment_6()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getGroup_7()); }
(rule__Rule__Group_7__0)*
{ after(grammarAccess.getRuleAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Rule__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_7__0__Impl
	rule__Rule__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getELSETerminalRuleCall_7_0()); }
	RULE_ELSE
{ after(grammarAccess.getRuleAccess().getELSETerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_7__1__Impl
	rule__Rule__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getGroup_7_1()); }
(rule__Rule__Group_7_1__0)*
{ after(grammarAccess.getRuleAccess().getGroup_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_7__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_7__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_7__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRuleAccess().getAtomicActionAssignment_7_2()); }
(rule__Rule__AtomicActionAssignment_7_2)
{ after(grammarAccess.getRuleAccess().getAtomicActionAssignment_7_2()); }
)
(
{ before(grammarAccess.getRuleAccess().getAtomicActionAssignment_7_2()); }
(rule__Rule__AtomicActionAssignment_7_2)*
{ after(grammarAccess.getRuleAccess().getAtomicActionAssignment_7_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Rule__Group_7_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_7_1__0__Impl
	rule__Rule__Group_7_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_7_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getIFTerminalRuleCall_7_1_0()); }
	RULE_IF
{ after(grammarAccess.getRuleAccess().getIFTerminalRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_7_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_7_1__1__Impl
	rule__Rule__Group_7_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_7_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getConditionAssignment_7_1_1()); }
(rule__Rule__ConditionAssignment_7_1_1)
{ after(grammarAccess.getRuleAccess().getConditionAssignment_7_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_7_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_7_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_7_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getTHENTerminalRuleCall_7_1_2()); }
	RULE_THEN
{ after(grammarAccess.getRuleAccess().getTHENTerminalRuleCall_7_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Condition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getMeasurementAssignment_0()); }
(rule__Condition__MeasurementAssignment_0)
{ after(grammarAccess.getConditionAccess().getMeasurementAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getOPERATORParserRuleCall_1()); }
	ruleOPERATOR
{ after(grammarAccess.getConditionAccess().getOPERATORParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__2__Impl
	rule__Condition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getVALUETerminalRuleCall_2()); }
	RULE_VALUE
{ after(grammarAccess.getConditionAccess().getVALUETerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getGroup_3()); }
(rule__Condition__Group_3__0)*
{ after(grammarAccess.getConditionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Condition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_3__0__Impl
	rule__Condition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getLOGICAL_OPERATORParserRuleCall_3_0()); }
	ruleLOGICAL_OPERATOR
{ after(grammarAccess.getConditionAccess().getLOGICAL_OPERATORParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_3__1__Impl
	rule__Condition__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getMeasAssignment_3_1()); }
(rule__Condition__MeasAssignment_3_1)
{ after(grammarAccess.getConditionAccess().getMeasAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_3__2__Impl
	rule__Condition__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getOPERATORParserRuleCall_3_2()); }
	ruleOPERATOR
{ after(grammarAccess.getConditionAccess().getOPERATORParserRuleCall_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getVALUETerminalRuleCall_3_3()); }
	RULE_VALUE
{ after(grammarAccess.getConditionAccess().getVALUETerminalRuleCall_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AVG__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AVG__Group__0__Impl
	rule__AVG__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AVG__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAVGAccess().getAVGKeyword_0()); }

	'AVG (' 

{ after(grammarAccess.getAVGAccess().getAVGKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AVG__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AVG__Group__1__Impl
	rule__AVG__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AVG__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAVGAccess().getGroup_1()); }
(rule__AVG__Group_1__0)
{ after(grammarAccess.getAVGAccess().getGroup_1()); }
)
(
{ before(grammarAccess.getAVGAccess().getGroup_1()); }
(rule__AVG__Group_1__0)*
{ after(grammarAccess.getAVGAccess().getGroup_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AVG__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AVG__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AVG__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAVGAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getAVGAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AVG__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AVG__Group_1__0__Impl
	rule__AVG__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AVG__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAVGAccess().getMeasurementAssignment_1_0()); }
(rule__AVG__MeasurementAssignment_1_0)
{ after(grammarAccess.getAVGAccess().getMeasurementAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AVG__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AVG__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AVG__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAVGAccess().getCommaKeyword_1_1()); }

	',' 

{ after(grammarAccess.getAVGAccess().getCommaKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MIN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MIN__Group__0__Impl
	rule__MIN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MIN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMINAccess().getMINKeyword_0()); }

	'MIN (' 

{ after(grammarAccess.getMINAccess().getMINKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MIN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MIN__Group__1__Impl
	rule__MIN__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MIN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMINAccess().getGroup_1()); }
(rule__MIN__Group_1__0)
{ after(grammarAccess.getMINAccess().getGroup_1()); }
)
(
{ before(grammarAccess.getMINAccess().getGroup_1()); }
(rule__MIN__Group_1__0)*
{ after(grammarAccess.getMINAccess().getGroup_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MIN__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MIN__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MIN__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMINAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getMINAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MIN__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MIN__Group_1__0__Impl
	rule__MIN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MIN__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMINAccess().getMeasurementAssignment_1_0()); }
(rule__MIN__MeasurementAssignment_1_0)
{ after(grammarAccess.getMINAccess().getMeasurementAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MIN__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MIN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MIN__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMINAccess().getCommaKeyword_1_1()); }

	',' 

{ after(grammarAccess.getMINAccess().getCommaKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MAX__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MAX__Group__0__Impl
	rule__MAX__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MAX__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAXAccess().getMAXKeyword_0()); }

	'MAX (' 

{ after(grammarAccess.getMAXAccess().getMAXKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MAX__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MAX__Group__1__Impl
	rule__MAX__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MAX__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMAXAccess().getGroup_1()); }
(rule__MAX__Group_1__0)
{ after(grammarAccess.getMAXAccess().getGroup_1()); }
)
(
{ before(grammarAccess.getMAXAccess().getGroup_1()); }
(rule__MAX__Group_1__0)*
{ after(grammarAccess.getMAXAccess().getGroup_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MAX__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MAX__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MAX__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAXAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getMAXAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MAX__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MAX__Group_1__0__Impl
	rule__MAX__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MAX__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAXAccess().getMeasurementAssignment_1_0()); }
(rule__MAX__MeasurementAssignment_1_0)
{ after(grammarAccess.getMAXAccess().getMeasurementAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MAX__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MAX__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MAX__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAXAccess().getCommaKeyword_1_1()); }

	',' 

{ after(grammarAccess.getMAXAccess().getCommaKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectAction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectAction__Group__0__Impl
	rule__SelectAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectActionAccess().getSELECTTerminalRuleCall_0()); }
	RULE_SELECT
{ after(grammarAccess.getSelectActionAccess().getSELECTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectAction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectActionAccess().getFeatureAssignment_1()); }
(rule__SelectAction__FeatureAssignment_1)
{ after(grammarAccess.getSelectActionAccess().getFeatureAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeselectAction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeselectAction__Group__0__Impl
	rule__DeselectAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeselectAction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeselectActionAccess().getDESELECTTerminalRuleCall_0()); }
	RULE_DESELECT
{ after(grammarAccess.getDeselectActionAccess().getDESELECTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeselectAction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeselectAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeselectAction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeselectActionAccess().getFeatureAssignment_1()); }
(rule__DeselectAction__FeatureAssignment_1)
{ after(grammarAccess.getDeselectActionAccess().getFeatureAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModifyAttribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModifyAttribute__Group__0__Impl
	rule__ModifyAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyAttribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifyAttributeAccess().getCHANGETerminalRuleCall_0()); }
	RULE_CHANGE
{ after(grammarAccess.getModifyAttributeAccess().getCHANGETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModifyAttribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModifyAttribute__Group__1__Impl
	rule__ModifyAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyAttribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifyAttributeAccess().getFeatureAttributeAssignment_1()); }
(rule__ModifyAttribute__FeatureAttributeAssignment_1)
{ after(grammarAccess.getModifyAttributeAccess().getFeatureAttributeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModifyAttribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModifyAttribute__Group__2__Impl
	rule__ModifyAttribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyAttribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifyAttributeAccess().getWITHTerminalRuleCall_2()); }
	RULE_WITH
{ after(grammarAccess.getModifyAttributeAccess().getWITHTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModifyAttribute__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModifyAttribute__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyAttribute__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifyAttributeAccess().getValueAssignment_3()); }
(rule__ModifyAttribute__ValueAssignment_3)
{ after(grammarAccess.getModifyAttributeAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__AdaptationModel__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptationModelAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getAdaptationModelAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdaptationModel__RulesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdaptationModelAccess().getRulesRuleParserRuleCall_1_0()); }
	ruleRule{ after(grammarAccess.getAdaptationModelAccess().getRulesRuleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getImportAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getConditionConditionParserRuleCall_4_0()); }
	ruleCondition{ after(grammarAccess.getRuleAccess().getConditionConditionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__AtomicActionAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getAtomicActionAtomicActionParserRuleCall_6_0()); }
	ruleAtomicAction{ after(grammarAccess.getRuleAccess().getAtomicActionAtomicActionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionAssignment_7_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getConditionConditionParserRuleCall_7_1_1_0()); }
	ruleCondition{ after(grammarAccess.getRuleAccess().getConditionConditionParserRuleCall_7_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__AtomicActionAssignment_7_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getAtomicActionAtomicActionParserRuleCall_7_2_0()); }
	ruleAtomicAction{ after(grammarAccess.getRuleAccess().getAtomicActionAtomicActionParserRuleCall_7_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__MeasurementAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getMeasurementImportCrossReference_0_0()); }
(
{ before(grammarAccess.getConditionAccess().getMeasurementImportIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getConditionAccess().getMeasurementImportIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getConditionAccess().getMeasurementImportCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__MeasAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getMeasImportCrossReference_3_1_0()); }
(
{ before(grammarAccess.getConditionAccess().getMeasImportIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getConditionAccess().getMeasImportIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getConditionAccess().getMeasImportCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AVG__MeasurementAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAVGAccess().getMeasurementImportCrossReference_1_0_0()); }
(
{ before(grammarAccess.getAVGAccess().getMeasurementImportIDTerminalRuleCall_1_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAVGAccess().getMeasurementImportIDTerminalRuleCall_1_0_0_1()); }
)
{ after(grammarAccess.getAVGAccess().getMeasurementImportCrossReference_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MIN__MeasurementAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMINAccess().getMeasurementImportCrossReference_1_0_0()); }
(
{ before(grammarAccess.getMINAccess().getMeasurementImportIDTerminalRuleCall_1_0_0_1()); }
	RULE_ID{ after(grammarAccess.getMINAccess().getMeasurementImportIDTerminalRuleCall_1_0_0_1()); }
)
{ after(grammarAccess.getMINAccess().getMeasurementImportCrossReference_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MAX__MeasurementAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAXAccess().getMeasurementImportCrossReference_1_0_0()); }
(
{ before(grammarAccess.getMAXAccess().getMeasurementImportIDTerminalRuleCall_1_0_0_1()); }
	RULE_ID{ after(grammarAccess.getMAXAccess().getMeasurementImportIDTerminalRuleCall_1_0_0_1()); }
)
{ after(grammarAccess.getMAXAccess().getMeasurementImportCrossReference_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__FeatureAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectActionAccess().getFeatureImportCrossReference_1_0()); }
(
{ before(grammarAccess.getSelectActionAccess().getFeatureImportIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getSelectActionAccess().getFeatureImportIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getSelectActionAccess().getFeatureImportCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeselectAction__FeatureAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeselectActionAccess().getFeatureImportCrossReference_1_0()); }
(
{ before(grammarAccess.getDeselectActionAccess().getFeatureImportIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDeselectActionAccess().getFeatureImportIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDeselectActionAccess().getFeatureImportCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyAttribute__FeatureAttributeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifyAttributeAccess().getFeatureAttributeImportCrossReference_1_0()); }
(
{ before(grammarAccess.getModifyAttributeAccess().getFeatureAttributeImportIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getModifyAttributeAccess().getFeatureAttributeImportIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getModifyAttributeAccess().getFeatureAttributeImportCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyAttribute__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifyAttributeAccess().getValueVALUETerminalRuleCall_3_0()); }
	RULE_VALUE{ after(grammarAccess.getModifyAttributeAccess().getValueVALUETerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_VALUE : '"' ('0'..'9'|'a'..'z'|'0'..'9' '.' '0'..'9')+ '"';

RULE_AND : 'AND';

RULE_OR : 'OR';

RULE_IF : 'if';

RULE_ELSE : 'else';

RULE_THEN : 'then';

RULE_RULE_TERMINAL : 'rule';

RULE_SELECT : 'select feature';

RULE_DESELECT : 'deselect feature';

RULE_CHANGE : 'change feature attribute';

RULE_WITH : 'with';

RULE_IMPORT_TERMINAL : 'import';

RULE_AS : 'as';

RULE_SMALLER : '<';

RULE_BIGGER : '>';

RULE_EQUAL : '==';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


