grammar org.rra.adaptationModel.AdaptationModelDSL with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "platform:/resource/org.rra.cdmModel.model/models/cdmModel.ecore" as cdmModel
import "http://www.rra.org/cdmmodel" as cdmModel
import "http://www.rra.org/datatypesmodel" as dtModel
//import "http://www.hyperflex.org/featureModel" as featureModel
import "platform:/resource/org.hyperflex.featuremodels.model/models/featureModel.ecore" as featuremModel
import "http://www.rra.org/runtimeFeatureModel" as rtFeatureModel

generate adaptationModelDSL "http://www.rra.org/adaptationModel/AdaptationModelDSL"

AdaptationModel:
	(imports+=Import*)    
 	(rules+=Rule*);

//terminal VALUE returns ecore::EString: '"' ('0'..'9' | 'a'..'z' | '0'..'9' '.' '0'..'9')+'"';

//terminal AND             returns ecore::EString: 'AND';
//terminal OR              returns ecore::EString:  'OR' ;
//terminal IF              returns ecore::EString: 'if';
//terminal ELSE            returns ecore::EString: 'else';
//terminal THEN            returns ecore::EString: 'then';
//terminal RULE_TERMINAL   returns ecore::EString: 'rule';
//terminal SELECT          returns ecore::EString: 'select feature';
//terminal DESELECT        returns ecore::EString: 'deselect feature';
//terminal CHANGE          returns ecore::EString: 'change feature attribute';
//terminal WITH            returns ecore::EString: 'with';
//terminal IMPORT_TERMINAL returns ecore::EString: 'import';
//terminal AS              returns ecore::EString: 'as';
//terminal SMALLER		 returns ecore::EString: '<';
//terminal BIGGER			 returns ecore::EString: '>';
//terminal EQUAL		     returns ecore::EString: '==';
//terminal NOT_EQUAL		returns ecore::EString: '<>'
//terminal SELECT_WHERE    returns ecore::EString: 'select feature * where';
//terminal FROM 		   returns ecore::EString: 'from';

Import:
	'import' importURI=STRING //AS name=ID
;

QualifiedNameWithWildcard:
	QualifiedName '.*'?
;

QualifiedName:
	ID ('.' ID)*
;	
	
Rule:
	'rule' name=ID ':' 
	'if' condition+=Condition 
	'then' (atomicAction+=AtomicAction+) 
	('else' ('if' condition+=Condition 'then')* atomicAction+=AtomicAction+)*
;

Condition:
	measurementComparison+=MeasurementComparison  
;

MeasurementComparison:
	measurement=[ cdmModel::ContextDependentMeasurement|QualifiedName ] OPERATOR STRING LOGICAL_OPERATOR?
;

//Condition:
//	measurement=[ cdmModel::ContextDependentMeasurement|QualifiedName ] OPERATOR STRING 
//	(LOGICAL_OPERATOR meas+=[Import] OPERATOR STRING)*  
//;


OPERATOR:
	'<' | '>' | '==' | '<>'	
;

LOGICAL_OPERATOR:
	'AND' | 'OR' 
;

MATH_OPERATOR:
	'max' | 'min' | 'avg' | 'count'
;

AVG:
	'AVG (' (measurement+=[Import] ',')+ ')' 
;

MIN:
	'MIN (' (measurement+=[Import] ',')+ ')'
;

MAX:
	'MAX (' (measurement+=[Import] ',')+ ')'
;

AtomicAction:
	SelectAction | DeselectAction | ModifyAttribute | QueryAction
;

QueryAction:
	'select feature' 'with' MATH_OPERATOR 'attribute' STRING 'from feature' feature=[ featuremModel::Feature ] 
;

//QueryAction:
	//SELECT_WHERE MATH_OPERATOR  
	//FROM feature+=[Import] 
	//(LOGICAL_OPERATOR SELECT WHERE mathOp+=MATH_OPERATOR FROM feature+=[Import])*
//;

SelectAction:
	'select feature' feature=[featuremModel::Feature]	
;

DeselectAction:
	'deselect feature' feature=[featuremModel::Feature]
;

ModifyAttribute:
	"set attribute" featureAttribute=[rtFeatureModel::CVAttribute] 'with value' attributeValue+=AttributeValue 
;

AttributeValue:
	
	StringAttributeValue | NFRAttributeValue
;

StringAttributeValue:
	value=STRING	
;

NFRAttributeValue:
	 value=[ rtFeatureModel::NFRAttribute|QualifiedName ]
;
