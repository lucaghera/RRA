grammar org.rra.adaptationModel.AdaptationModelDSL with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "platform:/resource/org.rra.cdmModel.model/models/cdmModel.ecore" as cdmModel
import "http://www.rra.org/cdmmodel" as cdmModel
import "http://www.rra.org/datatypesmodel" as dtModel
import "http://www.hyperflex.org/featuremodels" as featureModel
import "http://www.hyperflex.org/resolutionmodels" as resolutionModel
import "http://www.hyperflex.org/componentmodels.ros" as rosComponentModel
//import "platform:/resource/org.hyperflex.featuremodels.model/models/featureModel.ecore" as featuremModel
import "http://www.rra.org/runtimeFeatureModel" as rtFeatureModel

generate adaptationModelDSL "http://www.rra.org/adaptationModel/AdaptationModelDSL"

AdaptationModel:
	(imports+=Import*)
	'feature model' featureModel=[featureModel::FeatureModel]';'
	'template system model' tempalteSystemModel=[rosComponentModel::System]';'
	'resolution model' resolutionModel=[resolutionModel::ResolutionModel]';'
	'cdm model' cdmModel=[cdmModel::ContextDependentMeasurementsModel]';'
	'data types model' dataTypesModel=[dtModel::DataTypesModel]';'
	'name' name=ID ';' 
	'period[ms]' period=INT ';' 
	(adaptationRules+=AdaptationRule*)
;

//terminal NUMBER returns ecore::EBigDecimal:
//    (('0'..'9')+ ('.' ('0'..'9')*)? | '.' ('0'..'9')+)
//    (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
//;
 	


//terminal VALUE returns ecore::EString: '"' ('0'..'9' | 'a'..'z' | '0'..'9' '.' '0'..'9')+'"';

//terminal AND             returns ecore::EString: 'AND';
//terminal OR              returns ecore::EString:  'OR' ;
//terminal IF              returns ecore::EString: 'if';
//terminal ELSE            returns ecore::EString: 'else';
//terminal THEN            returns ecore::EString: 'then';
//terminal RULE_TERMINAL   returns ecore::EString: 'rule';
//terminal SELECT          returns ecore::EString: 'select feature';
//terminal DESELECT        returns ecore::EString: 'deselect feature';
//terminal CHANGE          returns ecore::EString: 'change feature attribute';
//terminal WITH            returns ecore::EString: 'with';
//terminal IMPORT_TERMINAL returns ecore::EString: 'import';
//terminal AS              returns ecore::EString: 'as';
//terminal SMALLER		 returns ecore::EString: '<';
//terminal BIGGER			 returns ecore::EString: '>';
//terminal EQUAL		     returns ecore::EString: '==';
//terminal NOT_EQUAL		returns ecore::EString: '<>'
//terminal SELECT_WHERE    returns ecore::EString: 'select feature * where';
//terminal FROM 		   returns ecore::EString: 'from';

Import:
	'import' importURI=STRING ';' //AS name=ID
;

QualifiedNameWithWildcard:
	QualifiedName '.*'?
;

QualifiedName:
	ID ('.' ID)*
;	

AdaptationRule:
 	AtomicRule | RuleSet
;

AtomicRule:
	'rule' name=ID '{' 
	ruleBody=RuleBody '}' ';'
;

RuleSet:
	
	'rule_set' name=ID '{' 
	atomicRules+=AtomicRuleWithPriority+
	'}'';'
;

AtomicRuleWithPriority:
	'rule' name=ID 'priority' priorityValue=INT '{'
	ruleBody=RuleBody '}'
;

AtomicAction:
	(AtomicActionSelectFeature | AtomicActionDeselectFeature | 
		AtomicActionModifyAttribute | AtomicActionQuery ) 
	('AND' secondAction=AtomicAction)?
;

RuleBody:
	PureAction | ConditionAction
;

PureAction:
	atomicAction=AtomicAction
;

ConditionAction:
	('if' '(' condition=Condition ')') atomicAction=AtomicAction
	('else' (else=RuleBody) )?
;

// Find a better name for secondTerm
// Find a way for using parenthesis for priority between operators
// Find a way of expressing complex conditions, with operators priorities
Condition:
	measurement=[ cdmModel::ContextDependentMeasurement|QualifiedName ] 
	operator=MathOperator value=STRING 
	( logicalOp=LogicalOperator secondTerm=Condition )? 
;

//ConditionExpression: 
//	firstTerm=Primary logicalOp=LogicalOperator secondTerm=Primary
//;
//
//SingleCondition:
//	measurement=[ cdmModel::ContextDependentMeasurement|QualifiedName ] 
//	operator=MathOperator value=STRING
//;
//
//Primary:
// SingleCondition | '(' ConditionExpression ')';

enum MathOperator:
	LESS='<' | GREATER='>' | EQUAL='==' | DIFFERENT='<>'	
;

enum LogicalOperator:
	AND='AND' | OR='OR' 
;

AtomicActionSelectFeature:
	'activate_feature' '(' feature=[featureModel::Feature|QualifiedName ] ')'	
;

AtomicActionDeselectFeature:
	'deactivate_feature' '(' feature=[featureModel::Feature|QualifiedName ] ')'
;

AtomicActionModifyAttribute:
	'set_attribute' '(' featureAttribute=[rtFeatureModel::CVAttribute|QualifiedName ] ')' 
	'with_value' '(' attributeValue+=AttributeValue ')' 
;

AtomicActionQuery:
	'select_feature_from_variants_of' '(' feature=[ featureModel::Feature|QualifiedName ] ')'
	'where_attribue' queryOperator=QueryOperator '(' value=STRING ')'  
;

enum QueryOperator:
	MAX='max' | MIN='min' | IS='is'
;

AttributeValue:
	StringAttributeValue | NFRAttributeValue
;

StringAttributeValue:
	value=STRING	
;

NFRAttributeValue:
	 value=[ rtFeatureModel::NFRAttribute|QualifiedName ]
;
