/*
* generated by Xtext
*/
package org.rra.adaptationModel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AdaptationModelDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AdaptationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdaptationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//AdaptationModel:
		//	imports+=Import* rules+=Rule*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* rules+=Rule*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIMPORT_TERMINALTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameWithWildcardParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cASTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		////terminal SELECT_WHERE    returns ecore::EString: 'select feature * where';
		////terminal FROM 		   returns ecore::EString: 'from';
		//Import:
		//	IMPORT_TERMINAL QualifiedNameWithWildcard AS name=ID;
		public ParserRule getRule() { return rule; }

		//IMPORT_TERMINAL QualifiedNameWithWildcard AS name=ID
		public Group getGroup() { return cGroup; }

		//IMPORT_TERMINAL
		public RuleCall getIMPORT_TERMINALTerminalRuleCall_0() { return cIMPORT_TERMINALTerminalRuleCall_0; }

		//QualifiedNameWithWildcard
		public RuleCall getQualifiedNameWithWildcardParserRuleCall_1() { return cQualifiedNameWithWildcardParserRuleCall_1; }

		//AS
		public RuleCall getASTerminalRuleCall_2() { return cASTerminalRuleCall_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRULE_TERMINALTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIFTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionConditionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final RuleCall cTHENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cAtomicActionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAtomicActionAtomicActionParserRuleCall_6_0 = (RuleCall)cAtomicActionAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cELSETerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final RuleCall cIFTerminalRuleCall_7_1_0 = (RuleCall)cGroup_7_1.eContents().get(0);
		private final Assignment cConditionAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_7_1_1_0 = (RuleCall)cConditionAssignment_7_1_1.eContents().get(0);
		private final RuleCall cTHENTerminalRuleCall_7_1_2 = (RuleCall)cGroup_7_1.eContents().get(2);
		private final Assignment cAtomicActionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cAtomicActionAtomicActionParserRuleCall_7_2_0 = (RuleCall)cAtomicActionAssignment_7_2.eContents().get(0);
		
		//Rule:
		//	RULE_TERMINAL name=ID ":" IF condition+=Condition THEN atomicAction+=AtomicAction+ (ELSE (IF condition+=Condition
		//	THEN)* atomicAction+=AtomicAction+)*;
		public ParserRule getRule() { return rule; }

		//RULE_TERMINAL name=ID ":" IF condition+=Condition THEN atomicAction+=AtomicAction+ (ELSE (IF condition+=Condition THEN)*
		//atomicAction+=AtomicAction+)*
		public Group getGroup() { return cGroup; }

		//RULE_TERMINAL
		public RuleCall getRULE_TERMINALTerminalRuleCall_0() { return cRULE_TERMINALTerminalRuleCall_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//IF
		public RuleCall getIFTerminalRuleCall_3() { return cIFTerminalRuleCall_3; }

		//condition+=Condition
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_4_0() { return cConditionConditionParserRuleCall_4_0; }

		//THEN
		public RuleCall getTHENTerminalRuleCall_5() { return cTHENTerminalRuleCall_5; }

		//atomicAction+=AtomicAction+
		public Assignment getAtomicActionAssignment_6() { return cAtomicActionAssignment_6; }

		//AtomicAction
		public RuleCall getAtomicActionAtomicActionParserRuleCall_6_0() { return cAtomicActionAtomicActionParserRuleCall_6_0; }

		//(ELSE (IF condition+=Condition THEN)* atomicAction+=AtomicAction+)*
		public Group getGroup_7() { return cGroup_7; }

		//ELSE
		public RuleCall getELSETerminalRuleCall_7_0() { return cELSETerminalRuleCall_7_0; }

		//(IF condition+=Condition THEN)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//IF
		public RuleCall getIFTerminalRuleCall_7_1_0() { return cIFTerminalRuleCall_7_1_0; }

		//condition+=Condition
		public Assignment getConditionAssignment_7_1_1() { return cConditionAssignment_7_1_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_7_1_1_0() { return cConditionConditionParserRuleCall_7_1_1_0; }

		//THEN
		public RuleCall getTHENTerminalRuleCall_7_1_2() { return cTHENTerminalRuleCall_7_1_2; }

		//atomicAction+=AtomicAction+
		public Assignment getAtomicActionAssignment_7_2() { return cAtomicActionAssignment_7_2; }

		//AtomicAction
		public RuleCall getAtomicActionAtomicActionParserRuleCall_7_2_0() { return cAtomicActionAtomicActionParserRuleCall_7_2_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMeasurementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMeasurementImportCrossReference_0_0 = (CrossReference)cMeasurementAssignment_0.eContents().get(0);
		private final RuleCall cMeasurementImportIDTerminalRuleCall_0_0_1 = (RuleCall)cMeasurementImportCrossReference_0_0.eContents().get(1);
		private final RuleCall cOPERATORParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cVALUETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cLOGICAL_OPERATORParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cMeasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMeasImportCrossReference_3_1_0 = (CrossReference)cMeasAssignment_3_1.eContents().get(0);
		private final RuleCall cMeasImportIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMeasImportCrossReference_3_1_0.eContents().get(1);
		private final RuleCall cOPERATORParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final RuleCall cVALUETerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		
		//Condition:
		//	measurement=[Import] OPERATOR VALUE (LOGICAL_OPERATOR meas+=[Import] OPERATOR VALUE)*;
		public ParserRule getRule() { return rule; }

		//measurement=[Import] OPERATOR VALUE (LOGICAL_OPERATOR meas+=[Import] OPERATOR VALUE)*
		public Group getGroup() { return cGroup; }

		//measurement=[Import]
		public Assignment getMeasurementAssignment_0() { return cMeasurementAssignment_0; }

		//[Import]
		public CrossReference getMeasurementImportCrossReference_0_0() { return cMeasurementImportCrossReference_0_0; }

		//ID
		public RuleCall getMeasurementImportIDTerminalRuleCall_0_0_1() { return cMeasurementImportIDTerminalRuleCall_0_0_1; }

		//OPERATOR
		public RuleCall getOPERATORParserRuleCall_1() { return cOPERATORParserRuleCall_1; }

		//VALUE
		public RuleCall getVALUETerminalRuleCall_2() { return cVALUETerminalRuleCall_2; }

		//(LOGICAL_OPERATOR meas+=[Import] OPERATOR VALUE)*
		public Group getGroup_3() { return cGroup_3; }

		//LOGICAL_OPERATOR
		public RuleCall getLOGICAL_OPERATORParserRuleCall_3_0() { return cLOGICAL_OPERATORParserRuleCall_3_0; }

		//meas+=[Import]
		public Assignment getMeasAssignment_3_1() { return cMeasAssignment_3_1; }

		//[Import]
		public CrossReference getMeasImportCrossReference_3_1_0() { return cMeasImportCrossReference_3_1_0; }

		//ID
		public RuleCall getMeasImportIDTerminalRuleCall_3_1_0_1() { return cMeasImportIDTerminalRuleCall_3_1_0_1; }

		//OPERATOR
		public RuleCall getOPERATORParserRuleCall_3_2() { return cOPERATORParserRuleCall_3_2; }

		//VALUE
		public RuleCall getVALUETerminalRuleCall_3_3() { return cVALUETerminalRuleCall_3_3; }
	}

	public class OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSMALLERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBIGGERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEQUALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OPERATOR:
		//	SMALLER | BIGGER | EQUAL;
		public ParserRule getRule() { return rule; }

		//SMALLER | BIGGER | EQUAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//SMALLER
		public RuleCall getSMALLERTerminalRuleCall_0() { return cSMALLERTerminalRuleCall_0; }

		//BIGGER
		public RuleCall getBIGGERTerminalRuleCall_1() { return cBIGGERTerminalRuleCall_1; }

		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_2() { return cEQUALTerminalRuleCall_2; }
	}

	public class LOGICAL_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOGICAL_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cANDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cORTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LOGICAL_OPERATOR:
		//	AND | OR;
		public ParserRule getRule() { return rule; }

		//AND | OR
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND
		public RuleCall getANDTerminalRuleCall_0() { return cANDTerminalRuleCall_0; }

		//OR
		public RuleCall getORTerminalRuleCall_1() { return cORTerminalRuleCall_1; }
	}

	public class MATH_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MATH_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMAXParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMINParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAVGParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MATH_OPERATOR:
		//	MAX | MIN | AVG;
		public ParserRule getRule() { return rule; }

		//MAX | MIN | AVG
		public Alternatives getAlternatives() { return cAlternatives; }

		//MAX
		public RuleCall getMAXParserRuleCall_0() { return cMAXParserRuleCall_0; }

		//MIN
		public RuleCall getMINParserRuleCall_1() { return cMINParserRuleCall_1; }

		//AVG
		public RuleCall getAVGParserRuleCall_2() { return cAVGParserRuleCall_2; }
	}

	public class AVGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AVG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAVGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMeasurementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cMeasurementImportCrossReference_1_0_0 = (CrossReference)cMeasurementAssignment_1_0.eContents().get(0);
		private final RuleCall cMeasurementImportIDTerminalRuleCall_1_0_0_1 = (RuleCall)cMeasurementImportCrossReference_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AVG:
		//	"AVG (" (measurement+=[Import] ",")+ ")";
		public ParserRule getRule() { return rule; }

		//"AVG (" (measurement+=[Import] ",")+ ")"
		public Group getGroup() { return cGroup; }

		//"AVG ("
		public Keyword getAVGKeyword_0() { return cAVGKeyword_0; }

		//(measurement+=[Import] ",")+
		public Group getGroup_1() { return cGroup_1; }

		//measurement+=[Import]
		public Assignment getMeasurementAssignment_1_0() { return cMeasurementAssignment_1_0; }

		//[Import]
		public CrossReference getMeasurementImportCrossReference_1_0_0() { return cMeasurementImportCrossReference_1_0_0; }

		//ID
		public RuleCall getMeasurementImportIDTerminalRuleCall_1_0_0_1() { return cMeasurementImportIDTerminalRuleCall_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class MINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MIN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMeasurementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cMeasurementImportCrossReference_1_0_0 = (CrossReference)cMeasurementAssignment_1_0.eContents().get(0);
		private final RuleCall cMeasurementImportIDTerminalRuleCall_1_0_0_1 = (RuleCall)cMeasurementImportCrossReference_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MIN:
		//	"MIN (" (measurement+=[Import] ",")+ ")";
		public ParserRule getRule() { return rule; }

		//"MIN (" (measurement+=[Import] ",")+ ")"
		public Group getGroup() { return cGroup; }

		//"MIN ("
		public Keyword getMINKeyword_0() { return cMINKeyword_0; }

		//(measurement+=[Import] ",")+
		public Group getGroup_1() { return cGroup_1; }

		//measurement+=[Import]
		public Assignment getMeasurementAssignment_1_0() { return cMeasurementAssignment_1_0; }

		//[Import]
		public CrossReference getMeasurementImportCrossReference_1_0_0() { return cMeasurementImportCrossReference_1_0_0; }

		//ID
		public RuleCall getMeasurementImportIDTerminalRuleCall_1_0_0_1() { return cMeasurementImportIDTerminalRuleCall_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class MAXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMAXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMeasurementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cMeasurementImportCrossReference_1_0_0 = (CrossReference)cMeasurementAssignment_1_0.eContents().get(0);
		private final RuleCall cMeasurementImportIDTerminalRuleCall_1_0_0_1 = (RuleCall)cMeasurementImportCrossReference_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MAX:
		//	"MAX (" (measurement+=[Import] ",")+ ")";
		public ParserRule getRule() { return rule; }

		//"MAX (" (measurement+=[Import] ",")+ ")"
		public Group getGroup() { return cGroup; }

		//"MAX ("
		public Keyword getMAXKeyword_0() { return cMAXKeyword_0; }

		//(measurement+=[Import] ",")+
		public Group getGroup_1() { return cGroup_1; }

		//measurement+=[Import]
		public Assignment getMeasurementAssignment_1_0() { return cMeasurementAssignment_1_0; }

		//[Import]
		public CrossReference getMeasurementImportCrossReference_1_0_0() { return cMeasurementImportCrossReference_1_0_0; }

		//ID
		public RuleCall getMeasurementImportIDTerminalRuleCall_1_0_0_1() { return cMeasurementImportIDTerminalRuleCall_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class AtomicActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeselectActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModifyAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AtomicAction:
		//	SelectAction | DeselectAction | //| QueryAction
		//	ModifyAttribute;
		public ParserRule getRule() { return rule; }

		//SelectAction | DeselectAction | //| QueryAction
		//ModifyAttribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//SelectAction
		public RuleCall getSelectActionParserRuleCall_0() { return cSelectActionParserRuleCall_0; }

		//DeselectAction
		public RuleCall getDeselectActionParserRuleCall_1() { return cDeselectActionParserRuleCall_1; }

		////| QueryAction
		//ModifyAttribute
		public RuleCall getModifyAttributeParserRuleCall_2() { return cModifyAttributeParserRuleCall_2; }
	}

	public class SelectActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSELECTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureImportCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureImportIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureImportCrossReference_1_0.eContents().get(1);
		
		////QueryAction:
		////SELECT_WHERE MATH_OPERATOR  
		////FROM feature+=[Import] 
		////(LOGICAL_OPERATOR SELECT WHERE mathOp+=MATH_OPERATOR FROM feature+=[Import])*
		////;
		//SelectAction:
		//	SELECT feature=[Import];
		public ParserRule getRule() { return rule; }

		//SELECT feature=[Import]
		public Group getGroup() { return cGroup; }

		//SELECT
		public RuleCall getSELECTTerminalRuleCall_0() { return cSELECTTerminalRuleCall_0; }

		//feature=[Import]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[Import]
		public CrossReference getFeatureImportCrossReference_1_0() { return cFeatureImportCrossReference_1_0; }

		//ID
		public RuleCall getFeatureImportIDTerminalRuleCall_1_0_1() { return cFeatureImportIDTerminalRuleCall_1_0_1; }
	}

	public class DeselectActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeselectAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDESELECTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureImportCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureImportIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureImportCrossReference_1_0.eContents().get(1);
		
		//DeselectAction:
		//	DESELECT feature=[Import];
		public ParserRule getRule() { return rule; }

		//DESELECT feature=[Import]
		public Group getGroup() { return cGroup; }

		//DESELECT
		public RuleCall getDESELECTTerminalRuleCall_0() { return cDESELECTTerminalRuleCall_0; }

		//feature=[Import]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[Import]
		public CrossReference getFeatureImportCrossReference_1_0() { return cFeatureImportCrossReference_1_0; }

		//ID
		public RuleCall getFeatureImportIDTerminalRuleCall_1_0_1() { return cFeatureImportIDTerminalRuleCall_1_0_1; }
	}

	public class ModifyAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModifyAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHANGETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cFeatureAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureAttributeImportCrossReference_1_0 = (CrossReference)cFeatureAttributeAssignment_1.eContents().get(0);
		private final RuleCall cFeatureAttributeImportIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureAttributeImportCrossReference_1_0.eContents().get(1);
		private final RuleCall cWITHTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueVALUETerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ModifyAttribute:
		//	CHANGE featureAttribute=[Import] WITH value=VALUE;
		public ParserRule getRule() { return rule; }

		//CHANGE featureAttribute=[Import] WITH value=VALUE
		public Group getGroup() { return cGroup; }

		//CHANGE
		public RuleCall getCHANGETerminalRuleCall_0() { return cCHANGETerminalRuleCall_0; }

		//featureAttribute=[Import]
		public Assignment getFeatureAttributeAssignment_1() { return cFeatureAttributeAssignment_1; }

		//[Import]
		public CrossReference getFeatureAttributeImportCrossReference_1_0() { return cFeatureAttributeImportCrossReference_1_0; }

		//ID
		public RuleCall getFeatureAttributeImportIDTerminalRuleCall_1_0_1() { return cFeatureAttributeImportIDTerminalRuleCall_1_0_1; }

		//WITH
		public RuleCall getWITHTerminalRuleCall_2() { return cWITHTerminalRuleCall_2; }

		//value=VALUE
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//VALUE
		public RuleCall getValueVALUETerminalRuleCall_3_0() { return cValueVALUETerminalRuleCall_3_0; }
	}
	
	
	private AdaptationModelElements pAdaptationModel;
	private TerminalRule tVALUE;
	private TerminalRule tAND;
	private TerminalRule tOR;
	private TerminalRule tIF;
	private TerminalRule tELSE;
	private TerminalRule tTHEN;
	private TerminalRule tRULE_TERMINAL;
	private TerminalRule tSELECT;
	private TerminalRule tDESELECT;
	private TerminalRule tCHANGE;
	private TerminalRule tWITH;
	private TerminalRule tIMPORT_TERMINAL;
	private TerminalRule tAS;
	private TerminalRule tSMALLER;
	private TerminalRule tBIGGER;
	private TerminalRule tEQUAL;
	private ImportElements pImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private RuleElements pRule;
	private ConditionElements pCondition;
	private OPERATORElements pOPERATOR;
	private LOGICAL_OPERATORElements pLOGICAL_OPERATOR;
	private MATH_OPERATORElements pMATH_OPERATOR;
	private AVGElements pAVG;
	private MINElements pMIN;
	private MAXElements pMAX;
	private AtomicActionElements pAtomicAction;
	private SelectActionElements pSelectAction;
	private DeselectActionElements pDeselectAction;
	private ModifyAttributeElements pModifyAttribute;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AdaptationModelDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.rra.adaptationModel.AdaptationModelDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AdaptationModel:
	//	imports+=Import* rules+=Rule*;
	public AdaptationModelElements getAdaptationModelAccess() {
		return (pAdaptationModel != null) ? pAdaptationModel : (pAdaptationModel = new AdaptationModelElements());
	}
	
	public ParserRule getAdaptationModelRule() {
		return getAdaptationModelAccess().getRule();
	}

	//terminal VALUE:
	//	"\"" ("0".."9" | "a".."z" | "0".."9" "." "0".."9")+ "\"";
	public TerminalRule getVALUERule() {
		return (tVALUE != null) ? tVALUE : (tVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VALUE"));
	} 

	//terminal AND:
	//	"AND";
	public TerminalRule getANDRule() {
		return (tAND != null) ? tAND : (tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AND"));
	} 

	//terminal OR:
	//	"OR";
	public TerminalRule getORRule() {
		return (tOR != null) ? tOR : (tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OR"));
	} 

	//terminal IF:
	//	"if";
	public TerminalRule getIFRule() {
		return (tIF != null) ? tIF : (tIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IF"));
	} 

	//terminal ELSE:
	//	"else";
	public TerminalRule getELSERule() {
		return (tELSE != null) ? tELSE : (tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ELSE"));
	} 

	//terminal THEN:
	//	"then";
	public TerminalRule getTHENRule() {
		return (tTHEN != null) ? tTHEN : (tTHEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "THEN"));
	} 

	//terminal RULE_TERMINAL:
	//	"rule";
	public TerminalRule getRULE_TERMINALRule() {
		return (tRULE_TERMINAL != null) ? tRULE_TERMINAL : (tRULE_TERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RULE_TERMINAL"));
	} 

	//terminal SELECT:
	//	"select feature";
	public TerminalRule getSELECTRule() {
		return (tSELECT != null) ? tSELECT : (tSELECT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SELECT"));
	} 

	//terminal DESELECT:
	//	"deselect feature";
	public TerminalRule getDESELECTRule() {
		return (tDESELECT != null) ? tDESELECT : (tDESELECT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DESELECT"));
	} 

	//terminal CHANGE:
	//	"change feature attribute";
	public TerminalRule getCHANGERule() {
		return (tCHANGE != null) ? tCHANGE : (tCHANGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHANGE"));
	} 

	//terminal WITH:
	//	"with";
	public TerminalRule getWITHRule() {
		return (tWITH != null) ? tWITH : (tWITH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WITH"));
	} 

	//terminal IMPORT_TERMINAL:
	//	"import";
	public TerminalRule getIMPORT_TERMINALRule() {
		return (tIMPORT_TERMINAL != null) ? tIMPORT_TERMINAL : (tIMPORT_TERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IMPORT_TERMINAL"));
	} 

	//terminal AS:
	//	"as";
	public TerminalRule getASRule() {
		return (tAS != null) ? tAS : (tAS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AS"));
	} 

	//terminal SMALLER:
	//	"<";
	public TerminalRule getSMALLERRule() {
		return (tSMALLER != null) ? tSMALLER : (tSMALLER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SMALLER"));
	} 

	//terminal BIGGER:
	//	">";
	public TerminalRule getBIGGERRule() {
		return (tBIGGER != null) ? tBIGGER : (tBIGGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BIGGER"));
	} 

	//terminal EQUAL:
	//	"==";
	public TerminalRule getEQUALRule() {
		return (tEQUAL != null) ? tEQUAL : (tEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQUAL"));
	} 

	////terminal SELECT_WHERE    returns ecore::EString: 'select feature * where';
	////terminal FROM 		   returns ecore::EString: 'from';
	//Import:
	//	IMPORT_TERMINAL QualifiedNameWithWildcard AS name=ID;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Rule:
	//	RULE_TERMINAL name=ID ":" IF condition+=Condition THEN atomicAction+=AtomicAction+ (ELSE (IF condition+=Condition
	//	THEN)* atomicAction+=AtomicAction+)*;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Condition:
	//	measurement=[Import] OPERATOR VALUE (LOGICAL_OPERATOR meas+=[Import] OPERATOR VALUE)*;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//OPERATOR:
	//	SMALLER | BIGGER | EQUAL;
	public OPERATORElements getOPERATORAccess() {
		return (pOPERATOR != null) ? pOPERATOR : (pOPERATOR = new OPERATORElements());
	}
	
	public ParserRule getOPERATORRule() {
		return getOPERATORAccess().getRule();
	}

	//LOGICAL_OPERATOR:
	//	AND | OR;
	public LOGICAL_OPERATORElements getLOGICAL_OPERATORAccess() {
		return (pLOGICAL_OPERATOR != null) ? pLOGICAL_OPERATOR : (pLOGICAL_OPERATOR = new LOGICAL_OPERATORElements());
	}
	
	public ParserRule getLOGICAL_OPERATORRule() {
		return getLOGICAL_OPERATORAccess().getRule();
	}

	//MATH_OPERATOR:
	//	MAX | MIN | AVG;
	public MATH_OPERATORElements getMATH_OPERATORAccess() {
		return (pMATH_OPERATOR != null) ? pMATH_OPERATOR : (pMATH_OPERATOR = new MATH_OPERATORElements());
	}
	
	public ParserRule getMATH_OPERATORRule() {
		return getMATH_OPERATORAccess().getRule();
	}

	//AVG:
	//	"AVG (" (measurement+=[Import] ",")+ ")";
	public AVGElements getAVGAccess() {
		return (pAVG != null) ? pAVG : (pAVG = new AVGElements());
	}
	
	public ParserRule getAVGRule() {
		return getAVGAccess().getRule();
	}

	//MIN:
	//	"MIN (" (measurement+=[Import] ",")+ ")";
	public MINElements getMINAccess() {
		return (pMIN != null) ? pMIN : (pMIN = new MINElements());
	}
	
	public ParserRule getMINRule() {
		return getMINAccess().getRule();
	}

	//MAX:
	//	"MAX (" (measurement+=[Import] ",")+ ")";
	public MAXElements getMAXAccess() {
		return (pMAX != null) ? pMAX : (pMAX = new MAXElements());
	}
	
	public ParserRule getMAXRule() {
		return getMAXAccess().getRule();
	}

	//AtomicAction:
	//	SelectAction | DeselectAction | //| QueryAction
	//	ModifyAttribute;
	public AtomicActionElements getAtomicActionAccess() {
		return (pAtomicAction != null) ? pAtomicAction : (pAtomicAction = new AtomicActionElements());
	}
	
	public ParserRule getAtomicActionRule() {
		return getAtomicActionAccess().getRule();
	}

	////QueryAction:
	////SELECT_WHERE MATH_OPERATOR  
	////FROM feature+=[Import] 
	////(LOGICAL_OPERATOR SELECT WHERE mathOp+=MATH_OPERATOR FROM feature+=[Import])*
	////;
	//SelectAction:
	//	SELECT feature=[Import];
	public SelectActionElements getSelectActionAccess() {
		return (pSelectAction != null) ? pSelectAction : (pSelectAction = new SelectActionElements());
	}
	
	public ParserRule getSelectActionRule() {
		return getSelectActionAccess().getRule();
	}

	//DeselectAction:
	//	DESELECT feature=[Import];
	public DeselectActionElements getDeselectActionAccess() {
		return (pDeselectAction != null) ? pDeselectAction : (pDeselectAction = new DeselectActionElements());
	}
	
	public ParserRule getDeselectActionRule() {
		return getDeselectActionAccess().getRule();
	}

	//ModifyAttribute:
	//	CHANGE featureAttribute=[Import] WITH value=VALUE;
	public ModifyAttributeElements getModifyAttributeAccess() {
		return (pModifyAttribute != null) ? pModifyAttribute : (pModifyAttribute = new ModifyAttributeElements());
	}
	
	public ParserRule getModifyAttributeRule() {
		return getModifyAttributeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
