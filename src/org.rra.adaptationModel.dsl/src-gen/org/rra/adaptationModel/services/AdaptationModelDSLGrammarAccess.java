/*
* generated by Xtext
*/
package org.rra.adaptationModel.services;

import java.util.List;

import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class AdaptationModelDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AdaptationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdaptationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPeriodMsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPeriodAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPeriodINTTerminalRuleCall_5_0 = (RuleCall)cPeriodAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAdaptationRulesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAdaptationRulesAdaptationRuleParserRuleCall_7_0 = (RuleCall)cAdaptationRulesAssignment_7.eContents().get(0);
		
		//AdaptationModel:
		//	imports+=Import* "name" name=ID ";" "period[ms]" period=INT ";" adaptationRules+=AdaptationRule*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* "name" name=ID ";" "period[ms]" period=INT ";" adaptationRules+=AdaptationRule*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//"name"
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//"period[ms]"
		public Keyword getPeriodMsKeyword_4() { return cPeriodMsKeyword_4; }

		//period=INT
		public Assignment getPeriodAssignment_5() { return cPeriodAssignment_5; }

		//INT
		public RuleCall getPeriodINTTerminalRuleCall_5_0() { return cPeriodINTTerminalRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//adaptationRules+=AdaptationRule*
		public Assignment getAdaptationRulesAssignment_7() { return cAdaptationRulesAssignment_7; }

		//AdaptationRule
		public RuleCall getAdaptationRulesAdaptationRuleParserRuleCall_7_0() { return cAdaptationRulesAdaptationRuleParserRuleCall_7_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////terminal NUMBER returns ecore::EBigDecimal:
		////    (('0'..'9')+ ('.' ('0'..'9')*)? | '.' ('0'..'9')+)
		////    (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
		////;
		////terminal VALUE returns ecore::EString: '"' ('0'..'9' | 'a'..'z' | '0'..'9' '.' '0'..'9')+'"';
		////terminal AND             returns ecore::EString: 'AND';
		////terminal OR              returns ecore::EString:  'OR' ;
		////terminal IF              returns ecore::EString: 'if';
		////terminal ELSE            returns ecore::EString: 'else';
		////terminal THEN            returns ecore::EString: 'then';
		////terminal RULE_TERMINAL   returns ecore::EString: 'rule';
		////terminal SELECT          returns ecore::EString: 'select feature';
		////terminal DESELECT        returns ecore::EString: 'deselect feature';
		////terminal CHANGE          returns ecore::EString: 'change feature attribute';
		////terminal WITH            returns ecore::EString: 'with';
		////terminal IMPORT_TERMINAL returns ecore::EString: 'import';
		////terminal AS              returns ecore::EString: 'as';
		////terminal SMALLER		 returns ecore::EString: '<';
		////terminal BIGGER			 returns ecore::EString: '>';
		////terminal EQUAL		     returns ecore::EString: '==';
		////terminal NOT_EQUAL		returns ecore::EString: '<>'
		////terminal SELECT_WHERE    returns ecore::EString: 'select feature * where';
		////terminal FROM 		   returns ecore::EString: 'from';
		//Import:
		//	"import" importURI=STRING //AS name=ID
		//	";";
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING //AS name=ID
		//";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		////AS name=ID
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class AdaptationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdaptationRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleSetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AdaptationRule:
		//	AtomicRule | RuleSet;
		public ParserRule getRule() { return rule; }

		//AtomicRule | RuleSet
		public Alternatives getAlternatives() { return cAlternatives; }

		//AtomicRule
		public RuleCall getAtomicRuleParserRuleCall_0() { return cAtomicRuleParserRuleCall_0; }

		//RuleSet
		public RuleCall getRuleSetParserRuleCall_1() { return cRuleSetParserRuleCall_1; }
	}

	public class AtomicRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRuleBodyRuleBodyParserRuleCall_3_0 = (RuleCall)cRuleBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AtomicRule:
		//	"rule" name=ID "{" ruleBody=RuleBody "}" ";";
		public ParserRule getRule() { return rule; }

		//"rule" name=ID "{" ruleBody=RuleBody "}" ";"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//ruleBody=RuleBody
		public Assignment getRuleBodyAssignment_3() { return cRuleBodyAssignment_3; }

		//RuleBody
		public RuleCall getRuleBodyRuleBodyParserRuleCall_3_0() { return cRuleBodyRuleBodyParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRule_setKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAtomicRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAtomicRulesAtomicRuleWithPriorityParserRuleCall_3_0 = (RuleCall)cAtomicRulesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RuleSet:
		//	"rule_set" name=ID "{" atomicRules+=AtomicRuleWithPriority+ "}" ";";
		public ParserRule getRule() { return rule; }

		//"rule_set" name=ID "{" atomicRules+=AtomicRuleWithPriority+ "}" ";"
		public Group getGroup() { return cGroup; }

		//"rule_set"
		public Keyword getRule_setKeyword_0() { return cRule_setKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//atomicRules+=AtomicRuleWithPriority+
		public Assignment getAtomicRulesAssignment_3() { return cAtomicRulesAssignment_3; }

		//AtomicRuleWithPriority
		public RuleCall getAtomicRulesAtomicRuleWithPriorityParserRuleCall_3_0() { return cAtomicRulesAtomicRuleWithPriorityParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class AtomicRuleWithPriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicRuleWithPriority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPriorityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPriorityValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPriorityValueINTTerminalRuleCall_3_0 = (RuleCall)cPriorityValueAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRuleBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRuleBodyRuleBodyParserRuleCall_5_0 = (RuleCall)cRuleBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AtomicRuleWithPriority:
		//	"rule" name=ID "priority" priorityValue=INT "{" ruleBody=RuleBody "}";
		public ParserRule getRule() { return rule; }

		//"rule" name=ID "priority" priorityValue=INT "{" ruleBody=RuleBody "}"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"priority"
		public Keyword getPriorityKeyword_2() { return cPriorityKeyword_2; }

		//priorityValue=INT
		public Assignment getPriorityValueAssignment_3() { return cPriorityValueAssignment_3; }

		//INT
		public RuleCall getPriorityValueINTTerminalRuleCall_3_0() { return cPriorityValueINTTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//ruleBody=RuleBody
		public Assignment getRuleBodyAssignment_5() { return cRuleBodyAssignment_5; }

		//RuleBody
		public RuleCall getRuleBodyRuleBodyParserRuleCall_5_0() { return cRuleBodyRuleBodyParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AtomicActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAtomicActionSelectFeatureParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cAtomicActionDeselectFeatureParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cAtomicActionModifyAttributeParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cAtomicActionQueryParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cANDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSecondActionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSecondActionAtomicActionParserRuleCall_1_1_0 = (RuleCall)cSecondActionAssignment_1_1.eContents().get(0);
		
		//AtomicAction:
		//	(AtomicActionSelectFeature | AtomicActionDeselectFeature | AtomicActionModifyAttribute | AtomicActionQuery) ("AND"
		//	secondAction=AtomicAction)?;
		public ParserRule getRule() { return rule; }

		//(AtomicActionSelectFeature | AtomicActionDeselectFeature | AtomicActionModifyAttribute | AtomicActionQuery) ("AND"
		//secondAction=AtomicAction)?
		public Group getGroup() { return cGroup; }

		//AtomicActionSelectFeature | AtomicActionDeselectFeature | AtomicActionModifyAttribute | AtomicActionQuery
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//AtomicActionSelectFeature
		public RuleCall getAtomicActionSelectFeatureParserRuleCall_0_0() { return cAtomicActionSelectFeatureParserRuleCall_0_0; }

		//AtomicActionDeselectFeature
		public RuleCall getAtomicActionDeselectFeatureParserRuleCall_0_1() { return cAtomicActionDeselectFeatureParserRuleCall_0_1; }

		//AtomicActionModifyAttribute
		public RuleCall getAtomicActionModifyAttributeParserRuleCall_0_2() { return cAtomicActionModifyAttributeParserRuleCall_0_2; }

		//AtomicActionQuery
		public RuleCall getAtomicActionQueryParserRuleCall_0_3() { return cAtomicActionQueryParserRuleCall_0_3; }

		//("AND" secondAction=AtomicAction)?
		public Group getGroup_1() { return cGroup_1; }

		//"AND"
		public Keyword getANDKeyword_1_0() { return cANDKeyword_1_0; }

		//secondAction=AtomicAction
		public Assignment getSecondActionAssignment_1_1() { return cSecondActionAssignment_1_1; }

		//AtomicAction
		public RuleCall getSecondActionAtomicActionParserRuleCall_1_1_0() { return cSecondActionAtomicActionParserRuleCall_1_1_0; }
	}

	public class RuleBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPureActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RuleBody:
		//	PureAction | ConditionAction;
		public ParserRule getRule() { return rule; }

		//PureAction | ConditionAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//PureAction
		public RuleCall getPureActionParserRuleCall_0() { return cPureActionParserRuleCall_0; }

		//ConditionAction
		public RuleCall getConditionActionParserRuleCall_1() { return cConditionActionParserRuleCall_1; }
	}

	public class PureActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PureAction");
		private final Assignment cAtomicActionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAtomicActionAtomicActionParserRuleCall_0 = (RuleCall)cAtomicActionAssignment.eContents().get(0);
		
		//PureAction:
		//	atomicAction=AtomicAction;
		public ParserRule getRule() { return rule; }

		//atomicAction=AtomicAction
		public Assignment getAtomicActionAssignment() { return cAtomicActionAssignment; }

		//AtomicAction
		public RuleCall getAtomicActionAtomicActionParserRuleCall_0() { return cAtomicActionAtomicActionParserRuleCall_0; }
	}

	public class ConditionActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConditionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_0_2_0 = (RuleCall)cConditionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cAtomicActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtomicActionAtomicActionParserRuleCall_1_0 = (RuleCall)cAtomicActionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElseRuleBodyParserRuleCall_2_1_0 = (RuleCall)cElseAssignment_2_1.eContents().get(0);
		
		//ConditionAction:
		//	("if" "(" condition=Condition ")") atomicAction=AtomicAction ("else" else=RuleBody)?;
		public ParserRule getRule() { return rule; }

		//("if" "(" condition=Condition ")") atomicAction=AtomicAction ("else" else=RuleBody)?
		public Group getGroup() { return cGroup; }

		//"if" "(" condition=Condition ")"
		public Group getGroup_0() { return cGroup_0; }

		//"if"
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//condition=Condition
		public Assignment getConditionAssignment_0_2() { return cConditionAssignment_0_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_2_0() { return cConditionConditionParserRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//atomicAction=AtomicAction
		public Assignment getAtomicActionAssignment_1() { return cAtomicActionAssignment_1; }

		//AtomicAction
		public RuleCall getAtomicActionAtomicActionParserRuleCall_1_0() { return cAtomicActionAtomicActionParserRuleCall_1_0; }

		//("else" else=RuleBody)?
		public Group getGroup_2() { return cGroup_2; }

		//"else"
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }

		//else=RuleBody
		public Assignment getElseAssignment_2_1() { return cElseAssignment_2_1; }

		//RuleBody
		public RuleCall getElseRuleBodyParserRuleCall_2_1_0() { return cElseRuleBodyParserRuleCall_2_1_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMeasurementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMeasurementContextDependentMeasurementCrossReference_0_0 = (CrossReference)cMeasurementAssignment_0.eContents().get(0);
		private final RuleCall cMeasurementContextDependentMeasurementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cMeasurementContextDependentMeasurementCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorMathOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLogicalOpAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLogicalOpLogicalOperatorEnumRuleCall_3_0_0 = (RuleCall)cLogicalOpAssignment_3_0.eContents().get(0);
		private final Assignment cSecondTermAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSecondTermConditionParserRuleCall_3_1_0 = (RuleCall)cSecondTermAssignment_3_1.eContents().get(0);
		
		//// Find a better name for secondTerm
		//// Find a way for using parenthesis for priority between operators
		//// Find a way of expressing complex conditions, with operators priorities
		//Condition:
		//	measurement=[cdmModel::ContextDependentMeasurement|QualifiedName] operator=MathOperator value=STRING
		//	(logicalOp=LogicalOperator secondTerm=Condition)?;
		public ParserRule getRule() { return rule; }

		//measurement=[cdmModel::ContextDependentMeasurement|QualifiedName] operator=MathOperator value=STRING
		//(logicalOp=LogicalOperator secondTerm=Condition)?
		public Group getGroup() { return cGroup; }

		//measurement=[cdmModel::ContextDependentMeasurement|QualifiedName]
		public Assignment getMeasurementAssignment_0() { return cMeasurementAssignment_0; }

		//[cdmModel::ContextDependentMeasurement|QualifiedName]
		public CrossReference getMeasurementContextDependentMeasurementCrossReference_0_0() { return cMeasurementContextDependentMeasurementCrossReference_0_0; }

		//QualifiedName
		public RuleCall getMeasurementContextDependentMeasurementQualifiedNameParserRuleCall_0_0_1() { return cMeasurementContextDependentMeasurementQualifiedNameParserRuleCall_0_0_1; }

		//operator=MathOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//MathOperator
		public RuleCall getOperatorMathOperatorEnumRuleCall_1_0() { return cOperatorMathOperatorEnumRuleCall_1_0; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }

		//(logicalOp=LogicalOperator secondTerm=Condition)?
		public Group getGroup_3() { return cGroup_3; }

		//logicalOp=LogicalOperator
		public Assignment getLogicalOpAssignment_3_0() { return cLogicalOpAssignment_3_0; }

		//LogicalOperator
		public RuleCall getLogicalOpLogicalOperatorEnumRuleCall_3_0_0() { return cLogicalOpLogicalOperatorEnumRuleCall_3_0_0; }

		//secondTerm=Condition
		public Assignment getSecondTermAssignment_3_1() { return cSecondTermAssignment_3_1; }

		//Condition
		public RuleCall getSecondTermConditionParserRuleCall_3_1_0() { return cSecondTermConditionParserRuleCall_3_1_0; }
	}

	public class AtomicActionSelectFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicActionSelectFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivate_featureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureFeatureCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cFeatureFeatureCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AtomicActionSelectFeature:
		//	"activate_feature" "(" feature=[featureModel::Feature|QualifiedName] ")";
		public ParserRule getRule() { return rule; }

		//"activate_feature" "(" feature=[featureModel::Feature|QualifiedName] ")"
		public Group getGroup() { return cGroup; }

		//"activate_feature"
		public Keyword getActivate_featureKeyword_0() { return cActivate_featureKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//feature=[featureModel::Feature|QualifiedName]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//[featureModel::Feature|QualifiedName]
		public CrossReference getFeatureFeatureCrossReference_2_0() { return cFeatureFeatureCrossReference_2_0; }

		//QualifiedName
		public RuleCall getFeatureFeatureQualifiedNameParserRuleCall_2_0_1() { return cFeatureFeatureQualifiedNameParserRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AtomicActionDeselectFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicActionDeselectFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeactivate_featureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureFeatureCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cFeatureFeatureCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AtomicActionDeselectFeature:
		//	"deactivate_feature" "(" feature=[featureModel::Feature|QualifiedName] ")";
		public ParserRule getRule() { return rule; }

		//"deactivate_feature" "(" feature=[featureModel::Feature|QualifiedName] ")"
		public Group getGroup() { return cGroup; }

		//"deactivate_feature"
		public Keyword getDeactivate_featureKeyword_0() { return cDeactivate_featureKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//feature=[featureModel::Feature|QualifiedName]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//[featureModel::Feature|QualifiedName]
		public CrossReference getFeatureFeatureCrossReference_2_0() { return cFeatureFeatureCrossReference_2_0; }

		//QualifiedName
		public RuleCall getFeatureFeatureQualifiedNameParserRuleCall_2_0_1() { return cFeatureFeatureQualifiedNameParserRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AtomicActionModifyAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicActionModifyAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSet_attributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureAttributeCVAttributeCrossReference_2_0 = (CrossReference)cFeatureAttributeAssignment_2.eContents().get(0);
		private final RuleCall cFeatureAttributeCVAttributeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cFeatureAttributeCVAttributeCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWith_valueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributeValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributeValueAttributeValueParserRuleCall_6_0 = (RuleCall)cAttributeValueAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AtomicActionModifyAttribute:
		//	"set_attribute" "(" featureAttribute=[rtFeatureModel::CVAttribute|QualifiedName] ")" "with_value" "("
		//	attributeValue+=AttributeValue ")";
		public ParserRule getRule() { return rule; }

		//"set_attribute" "(" featureAttribute=[rtFeatureModel::CVAttribute|QualifiedName] ")" "with_value" "("
		//attributeValue+=AttributeValue ")"
		public Group getGroup() { return cGroup; }

		//"set_attribute"
		public Keyword getSet_attributeKeyword_0() { return cSet_attributeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//featureAttribute=[rtFeatureModel::CVAttribute|QualifiedName]
		public Assignment getFeatureAttributeAssignment_2() { return cFeatureAttributeAssignment_2; }

		//[rtFeatureModel::CVAttribute|QualifiedName]
		public CrossReference getFeatureAttributeCVAttributeCrossReference_2_0() { return cFeatureAttributeCVAttributeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getFeatureAttributeCVAttributeQualifiedNameParserRuleCall_2_0_1() { return cFeatureAttributeCVAttributeQualifiedNameParserRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"with_value"
		public Keyword getWith_valueKeyword_4() { return cWith_valueKeyword_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//attributeValue+=AttributeValue
		public Assignment getAttributeValueAssignment_6() { return cAttributeValueAssignment_6; }

		//AttributeValue
		public RuleCall getAttributeValueAttributeValueParserRuleCall_6_0() { return cAttributeValueAttributeValueParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class AtomicActionQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicActionQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelect_feature_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFrom_variants_of_featureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFeatureFeatureCrossReference_3_0 = (CrossReference)cFeatureAssignment_3.eContents().get(0);
		private final RuleCall cFeatureFeatureQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cFeatureFeatureCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWhere_attribueKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cQueryOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cQueryOperatorQueryOperatorEnumRuleCall_6_0 = (RuleCall)cQueryOperatorAssignment_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueSTRINGTerminalRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AtomicActionQuery:
		//	"select_feature_*" "from_variants_of_feature" "(" feature=[featureModel::Feature|QualifiedName] ")" "where_attribue"
		//	queryOperator=QueryOperator "(" value=STRING ")";
		public ParserRule getRule() { return rule; }

		//"select_feature_*" "from_variants_of_feature" "(" feature=[featureModel::Feature|QualifiedName] ")" "where_attribue"
		//queryOperator=QueryOperator "(" value=STRING ")"
		public Group getGroup() { return cGroup; }

		//"select_feature_*"
		public Keyword getSelect_feature_Keyword_0() { return cSelect_feature_Keyword_0; }

		//"from_variants_of_feature"
		public Keyword getFrom_variants_of_featureKeyword_1() { return cFrom_variants_of_featureKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//feature=[featureModel::Feature|QualifiedName]
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }

		//[featureModel::Feature|QualifiedName]
		public CrossReference getFeatureFeatureCrossReference_3_0() { return cFeatureFeatureCrossReference_3_0; }

		//QualifiedName
		public RuleCall getFeatureFeatureQualifiedNameParserRuleCall_3_0_1() { return cFeatureFeatureQualifiedNameParserRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"where_attribue"
		public Keyword getWhere_attribueKeyword_5() { return cWhere_attribueKeyword_5; }

		//queryOperator=QueryOperator
		public Assignment getQueryOperatorAssignment_6() { return cQueryOperatorAssignment_6; }

		//QueryOperator
		public RuleCall getQueryOperatorQueryOperatorEnumRuleCall_6_0() { return cQueryOperatorQueryOperatorEnumRuleCall_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//value=STRING
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_8_0() { return cValueSTRINGTerminalRuleCall_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}

	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringAttributeValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNFRAttributeValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttributeValue:
		//	StringAttributeValue | NFRAttributeValue;
		public ParserRule getRule() { return rule; }

		//StringAttributeValue | NFRAttributeValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringAttributeValue
		public RuleCall getStringAttributeValueParserRuleCall_0() { return cStringAttributeValueParserRuleCall_0; }

		//NFRAttributeValue
		public RuleCall getNFRAttributeValueParserRuleCall_1() { return cNFRAttributeValueParserRuleCall_1; }
	}

	public class StringAttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringAttributeValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringAttributeValue:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NFRAttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NFRAttributeValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueNFRAttributeCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueNFRAttributeQualifiedNameParserRuleCall_0_1 = (RuleCall)cValueNFRAttributeCrossReference_0.eContents().get(1);
		
		//NFRAttributeValue:
		//	value=[rtFeatureModel::NFRAttribute|QualifiedName];
		public ParserRule getRule() { return rule; }

		//value=[rtFeatureModel::NFRAttribute|QualifiedName]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[rtFeatureModel::NFRAttribute|QualifiedName]
		public CrossReference getValueNFRAttributeCrossReference_0() { return cValueNFRAttributeCrossReference_0; }

		//QualifiedName
		public RuleCall getValueNFRAttributeQualifiedNameParserRuleCall_0_1() { return cValueNFRAttributeQualifiedNameParserRuleCall_0_1; }
	}
	
	
	public class MathOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MathOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGreaterThanSignKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEQUALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIFFERENTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIFFERENTLessThanSignGreaterThanSignKeyword_3_0 = (Keyword)cDIFFERENTEnumLiteralDeclaration_3.eContents().get(0);
		
		////ConditionExpression: 
		////	firstTerm=Primary logicalOp=LogicalOperator secondTerm=Primary
		////;
		////
		////SingleCondition:
		////	measurement=[ cdmModel::ContextDependentMeasurement|QualifiedName ] 
		////	operator=MathOperator value=STRING
		////;
		////
		////Primary:
		//// SingleCondition | '(' ConditionExpression ')';
		//enum MathOperator:
		//	LESS="<" | GREATER=">" | EQUAL="==" | DIFFERENT="<>";
		public EnumRule getRule() { return rule; }

		//LESS="<" | GREATER=">" | EQUAL="==" | DIFFERENT="<>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LESS="<"
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }

		//GREATER=">"
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }

		//">"
		public Keyword getGREATERGreaterThanSignKeyword_1_0() { return cGREATERGreaterThanSignKeyword_1_0; }

		//EQUAL="=="
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_2() { return cEQUALEnumLiteralDeclaration_2; }

		//"=="
		public Keyword getEQUALEqualsSignEqualsSignKeyword_2_0() { return cEQUALEqualsSignEqualsSignKeyword_2_0; }

		//DIFFERENT="<>"
		public EnumLiteralDeclaration getDIFFERENTEnumLiteralDeclaration_3() { return cDIFFERENTEnumLiteralDeclaration_3; }

		//"<>"
		public Keyword getDIFFERENTLessThanSignGreaterThanSignKeyword_3_0() { return cDIFFERENTLessThanSignGreaterThanSignKeyword_3_0; }
	}

	public class LogicalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LogicalOperator:
		//	AND | OR;
		public EnumRule getRule() { return rule; }

		//AND | OR
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }

		//"AND"
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }

		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }

		//"OR"
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
	}

	public class QueryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "QueryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMAXMaxKeyword_0_0 = (Keyword)cMAXEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINMinKeyword_1_0 = (Keyword)cMINEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cISEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cISIsKeyword_2_0 = (Keyword)cISEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum QueryOperator:
		//	MAX="max" | MIN="min" | IS="is";
		public EnumRule getRule() { return rule; }

		//MAX="max" | MIN="min" | IS="is"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MAX="max"
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_0() { return cMAXEnumLiteralDeclaration_0; }

		//"max"
		public Keyword getMAXMaxKeyword_0_0() { return cMAXMaxKeyword_0_0; }

		//MIN="min"
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_1() { return cMINEnumLiteralDeclaration_1; }

		//"min"
		public Keyword getMINMinKeyword_1_0() { return cMINMinKeyword_1_0; }

		//IS="is"
		public EnumLiteralDeclaration getISEnumLiteralDeclaration_2() { return cISEnumLiteralDeclaration_2; }

		//"is"
		public Keyword getISIsKeyword_2_0() { return cISIsKeyword_2_0; }
	}
	
	private AdaptationModelElements pAdaptationModel;
	private ImportElements pImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private AdaptationRuleElements pAdaptationRule;
	private AtomicRuleElements pAtomicRule;
	private RuleSetElements pRuleSet;
	private AtomicRuleWithPriorityElements pAtomicRuleWithPriority;
	private AtomicActionElements pAtomicAction;
	private RuleBodyElements pRuleBody;
	private PureActionElements pPureAction;
	private ConditionActionElements pConditionAction;
	private ConditionElements pCondition;
	private MathOperatorElements unknownRuleMathOperator;
	private LogicalOperatorElements unknownRuleLogicalOperator;
	private AtomicActionSelectFeatureElements pAtomicActionSelectFeature;
	private AtomicActionDeselectFeatureElements pAtomicActionDeselectFeature;
	private AtomicActionModifyAttributeElements pAtomicActionModifyAttribute;
	private AtomicActionQueryElements pAtomicActionQuery;
	private QueryOperatorElements unknownRuleQueryOperator;
	private AttributeValueElements pAttributeValue;
	private StringAttributeValueElements pStringAttributeValue;
	private NFRAttributeValueElements pNFRAttributeValue;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AdaptationModelDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.rra.adaptationModel.AdaptationModelDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AdaptationModel:
	//	imports+=Import* "name" name=ID ";" "period[ms]" period=INT ";" adaptationRules+=AdaptationRule*;
	public AdaptationModelElements getAdaptationModelAccess() {
		return (pAdaptationModel != null) ? pAdaptationModel : (pAdaptationModel = new AdaptationModelElements());
	}
	
	public ParserRule getAdaptationModelRule() {
		return getAdaptationModelAccess().getRule();
	}

	////terminal NUMBER returns ecore::EBigDecimal:
	////    (('0'..'9')+ ('.' ('0'..'9')*)? | '.' ('0'..'9')+)
	////    (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
	////;
	////terminal VALUE returns ecore::EString: '"' ('0'..'9' | 'a'..'z' | '0'..'9' '.' '0'..'9')+'"';
	////terminal AND             returns ecore::EString: 'AND';
	////terminal OR              returns ecore::EString:  'OR' ;
	////terminal IF              returns ecore::EString: 'if';
	////terminal ELSE            returns ecore::EString: 'else';
	////terminal THEN            returns ecore::EString: 'then';
	////terminal RULE_TERMINAL   returns ecore::EString: 'rule';
	////terminal SELECT          returns ecore::EString: 'select feature';
	////terminal DESELECT        returns ecore::EString: 'deselect feature';
	////terminal CHANGE          returns ecore::EString: 'change feature attribute';
	////terminal WITH            returns ecore::EString: 'with';
	////terminal IMPORT_TERMINAL returns ecore::EString: 'import';
	////terminal AS              returns ecore::EString: 'as';
	////terminal SMALLER		 returns ecore::EString: '<';
	////terminal BIGGER			 returns ecore::EString: '>';
	////terminal EQUAL		     returns ecore::EString: '==';
	////terminal NOT_EQUAL		returns ecore::EString: '<>'
	////terminal SELECT_WHERE    returns ecore::EString: 'select feature * where';
	////terminal FROM 		   returns ecore::EString: 'from';
	//Import:
	//	"import" importURI=STRING //AS name=ID
	//	";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//AdaptationRule:
	//	AtomicRule | RuleSet;
	public AdaptationRuleElements getAdaptationRuleAccess() {
		return (pAdaptationRule != null) ? pAdaptationRule : (pAdaptationRule = new AdaptationRuleElements());
	}
	
	public ParserRule getAdaptationRuleRule() {
		return getAdaptationRuleAccess().getRule();
	}

	//AtomicRule:
	//	"rule" name=ID "{" ruleBody=RuleBody "}" ";";
	public AtomicRuleElements getAtomicRuleAccess() {
		return (pAtomicRule != null) ? pAtomicRule : (pAtomicRule = new AtomicRuleElements());
	}
	
	public ParserRule getAtomicRuleRule() {
		return getAtomicRuleAccess().getRule();
	}

	//RuleSet:
	//	"rule_set" name=ID "{" atomicRules+=AtomicRuleWithPriority+ "}" ";";
	public RuleSetElements getRuleSetAccess() {
		return (pRuleSet != null) ? pRuleSet : (pRuleSet = new RuleSetElements());
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}

	//AtomicRuleWithPriority:
	//	"rule" name=ID "priority" priorityValue=INT "{" ruleBody=RuleBody "}";
	public AtomicRuleWithPriorityElements getAtomicRuleWithPriorityAccess() {
		return (pAtomicRuleWithPriority != null) ? pAtomicRuleWithPriority : (pAtomicRuleWithPriority = new AtomicRuleWithPriorityElements());
	}
	
	public ParserRule getAtomicRuleWithPriorityRule() {
		return getAtomicRuleWithPriorityAccess().getRule();
	}

	//AtomicAction:
	//	(AtomicActionSelectFeature | AtomicActionDeselectFeature | AtomicActionModifyAttribute | AtomicActionQuery) ("AND"
	//	secondAction=AtomicAction)?;
	public AtomicActionElements getAtomicActionAccess() {
		return (pAtomicAction != null) ? pAtomicAction : (pAtomicAction = new AtomicActionElements());
	}
	
	public ParserRule getAtomicActionRule() {
		return getAtomicActionAccess().getRule();
	}

	//RuleBody:
	//	PureAction | ConditionAction;
	public RuleBodyElements getRuleBodyAccess() {
		return (pRuleBody != null) ? pRuleBody : (pRuleBody = new RuleBodyElements());
	}
	
	public ParserRule getRuleBodyRule() {
		return getRuleBodyAccess().getRule();
	}

	//PureAction:
	//	atomicAction=AtomicAction;
	public PureActionElements getPureActionAccess() {
		return (pPureAction != null) ? pPureAction : (pPureAction = new PureActionElements());
	}
	
	public ParserRule getPureActionRule() {
		return getPureActionAccess().getRule();
	}

	//ConditionAction:
	//	("if" "(" condition=Condition ")") atomicAction=AtomicAction ("else" else=RuleBody)?;
	public ConditionActionElements getConditionActionAccess() {
		return (pConditionAction != null) ? pConditionAction : (pConditionAction = new ConditionActionElements());
	}
	
	public ParserRule getConditionActionRule() {
		return getConditionActionAccess().getRule();
	}

	//// Find a better name for secondTerm
	//// Find a way for using parenthesis for priority between operators
	//// Find a way of expressing complex conditions, with operators priorities
	//Condition:
	//	measurement=[cdmModel::ContextDependentMeasurement|QualifiedName] operator=MathOperator value=STRING
	//	(logicalOp=LogicalOperator secondTerm=Condition)?;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	////ConditionExpression: 
	////	firstTerm=Primary logicalOp=LogicalOperator secondTerm=Primary
	////;
	////
	////SingleCondition:
	////	measurement=[ cdmModel::ContextDependentMeasurement|QualifiedName ] 
	////	operator=MathOperator value=STRING
	////;
	////
	////Primary:
	//// SingleCondition | '(' ConditionExpression ')';
	//enum MathOperator:
	//	LESS="<" | GREATER=">" | EQUAL="==" | DIFFERENT="<>";
	public MathOperatorElements getMathOperatorAccess() {
		return (unknownRuleMathOperator != null) ? unknownRuleMathOperator : (unknownRuleMathOperator = new MathOperatorElements());
	}
	
	public EnumRule getMathOperatorRule() {
		return getMathOperatorAccess().getRule();
	}

	//enum LogicalOperator:
	//	AND | OR;
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return (unknownRuleLogicalOperator != null) ? unknownRuleLogicalOperator : (unknownRuleLogicalOperator = new LogicalOperatorElements());
	}
	
	public EnumRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}

	//AtomicActionSelectFeature:
	//	"activate_feature" "(" feature=[featureModel::Feature|QualifiedName] ")";
	public AtomicActionSelectFeatureElements getAtomicActionSelectFeatureAccess() {
		return (pAtomicActionSelectFeature != null) ? pAtomicActionSelectFeature : (pAtomicActionSelectFeature = new AtomicActionSelectFeatureElements());
	}
	
	public ParserRule getAtomicActionSelectFeatureRule() {
		return getAtomicActionSelectFeatureAccess().getRule();
	}

	//AtomicActionDeselectFeature:
	//	"deactivate_feature" "(" feature=[featureModel::Feature|QualifiedName] ")";
	public AtomicActionDeselectFeatureElements getAtomicActionDeselectFeatureAccess() {
		return (pAtomicActionDeselectFeature != null) ? pAtomicActionDeselectFeature : (pAtomicActionDeselectFeature = new AtomicActionDeselectFeatureElements());
	}
	
	public ParserRule getAtomicActionDeselectFeatureRule() {
		return getAtomicActionDeselectFeatureAccess().getRule();
	}

	//AtomicActionModifyAttribute:
	//	"set_attribute" "(" featureAttribute=[rtFeatureModel::CVAttribute|QualifiedName] ")" "with_value" "("
	//	attributeValue+=AttributeValue ")";
	public AtomicActionModifyAttributeElements getAtomicActionModifyAttributeAccess() {
		return (pAtomicActionModifyAttribute != null) ? pAtomicActionModifyAttribute : (pAtomicActionModifyAttribute = new AtomicActionModifyAttributeElements());
	}
	
	public ParserRule getAtomicActionModifyAttributeRule() {
		return getAtomicActionModifyAttributeAccess().getRule();
	}

	//AtomicActionQuery:
	//	"select_feature_*" "from_variants_of_feature" "(" feature=[featureModel::Feature|QualifiedName] ")" "where_attribue"
	//	queryOperator=QueryOperator "(" value=STRING ")";
	public AtomicActionQueryElements getAtomicActionQueryAccess() {
		return (pAtomicActionQuery != null) ? pAtomicActionQuery : (pAtomicActionQuery = new AtomicActionQueryElements());
	}
	
	public ParserRule getAtomicActionQueryRule() {
		return getAtomicActionQueryAccess().getRule();
	}

	//enum QueryOperator:
	//	MAX="max" | MIN="min" | IS="is";
	public QueryOperatorElements getQueryOperatorAccess() {
		return (unknownRuleQueryOperator != null) ? unknownRuleQueryOperator : (unknownRuleQueryOperator = new QueryOperatorElements());
	}
	
	public EnumRule getQueryOperatorRule() {
		return getQueryOperatorAccess().getRule();
	}

	//AttributeValue:
	//	StringAttributeValue | NFRAttributeValue;
	public AttributeValueElements getAttributeValueAccess() {
		return (pAttributeValue != null) ? pAttributeValue : (pAttributeValue = new AttributeValueElements());
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}

	//StringAttributeValue:
	//	value=STRING;
	public StringAttributeValueElements getStringAttributeValueAccess() {
		return (pStringAttributeValue != null) ? pStringAttributeValue : (pStringAttributeValue = new StringAttributeValueElements());
	}
	
	public ParserRule getStringAttributeValueRule() {
		return getStringAttributeValueAccess().getRule();
	}

	//NFRAttributeValue:
	//	value=[rtFeatureModel::NFRAttribute|QualifiedName];
	public NFRAttributeValueElements getNFRAttributeValueAccess() {
		return (pNFRAttributeValue != null) ? pNFRAttributeValue : (pNFRAttributeValue = new NFRAttributeValueElements());
	}
	
	public ParserRule getNFRAttributeValueRule() {
		return getNFRAttributeValueAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
