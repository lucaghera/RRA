/*
* generated by Xtext
*/
package org.rra.adaptationModel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AdaptationModelDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AdaptationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdaptationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFrequencyKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFrequencyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFrequencyINTTerminalRuleCall_5_0 = (RuleCall)cFrequencyAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAdaptationRulesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAdaptationRulesAdaptationRuleParserRuleCall_7_0 = (RuleCall)cAdaptationRulesAssignment_7.eContents().get(0);
		
		//// 	(rules+=Rule*)
		//// 	(ruleSets+=RuleSet*);
		//AdaptationModel:
		//	imports+=Import* "name" name=QualifiedName ";" "frequency" frequency=INT ";" adaptationRules+=AdaptationRule*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* "name" name=QualifiedName ";" "frequency" frequency=INT ";" adaptationRules+=AdaptationRule*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//"name"
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//"frequency"
		public Keyword getFrequencyKeyword_4() { return cFrequencyKeyword_4; }

		//frequency=INT
		public Assignment getFrequencyAssignment_5() { return cFrequencyAssignment_5; }

		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_5_0() { return cFrequencyINTTerminalRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//adaptationRules+=AdaptationRule*
		public Assignment getAdaptationRulesAssignment_7() { return cAdaptationRulesAssignment_7; }

		//AdaptationRule
		public RuleCall getAdaptationRulesAdaptationRuleParserRuleCall_7_0() { return cAdaptationRulesAdaptationRuleParserRuleCall_7_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////terminal NUMBER returns ecore::EBigDecimal:
		////    (('0'..'9')+ ('.' ('0'..'9')*)? | '.' ('0'..'9')+)
		////    (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
		////;
		////terminal VALUE returns ecore::EString: '"' ('0'..'9' | 'a'..'z' | '0'..'9' '.' '0'..'9')+'"';
		////terminal AND             returns ecore::EString: 'AND';
		////terminal OR              returns ecore::EString:  'OR' ;
		////terminal IF              returns ecore::EString: 'if';
		////terminal ELSE            returns ecore::EString: 'else';
		////terminal THEN            returns ecore::EString: 'then';
		////terminal RULE_TERMINAL   returns ecore::EString: 'rule';
		////terminal SELECT          returns ecore::EString: 'select feature';
		////terminal DESELECT        returns ecore::EString: 'deselect feature';
		////terminal CHANGE          returns ecore::EString: 'change feature attribute';
		////terminal WITH            returns ecore::EString: 'with';
		////terminal IMPORT_TERMINAL returns ecore::EString: 'import';
		////terminal AS              returns ecore::EString: 'as';
		////terminal SMALLER		 returns ecore::EString: '<';
		////terminal BIGGER			 returns ecore::EString: '>';
		////terminal EQUAL		     returns ecore::EString: '==';
		////terminal NOT_EQUAL		returns ecore::EString: '<>'
		////terminal SELECT_WHERE    returns ecore::EString: 'select feature * where';
		////terminal FROM 		   returns ecore::EString: 'from';
		//Import:
		//	"import" importURI=STRING //AS name=ID
		//	";";
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING //AS name=ID
		//";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		////AS name=ID
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class AdaptationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdaptationRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleSetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AdaptationRule:
		//	AtomicRule | RuleSet;
		public ParserRule getRule() { return rule; }

		//AtomicRule | RuleSet
		public Alternatives getAlternatives() { return cAlternatives; }

		//AtomicRule
		public RuleCall getAtomicRuleParserRuleCall_0() { return cAtomicRuleParserRuleCall_0; }

		//RuleSet
		public RuleCall getRuleSetParserRuleCall_1() { return cRuleSetParserRuleCall_1; }
	}

	public class AtomicRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionActionConditionActionParserRuleCall_3_0 = (RuleCall)cConditionActionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// It's necessary that condition and action are part of the same element
		////AtomicRule:
		////	'rule' name=ID ':' 
		////	('if' '(' condition+=Condition+ ')')? (atomicAction+=AtomicAction+) 
		////	('else' ('if' '(' condition+=Condition ')' )* atomicAction+=AtomicAction+)* ';'
		////;
		////	('else' conditionAction+=ConditionAction)* ';'
		//AtomicRule:
		//	"rule" name=ID ":" conditionAction+=ConditionAction ";";
		public ParserRule getRule() { return rule; }

		//"rule" name=ID ":" conditionAction+=ConditionAction ";"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//conditionAction+=ConditionAction
		public Assignment getConditionActionAssignment_3() { return cConditionActionAssignment_3; }

		//ConditionAction
		public RuleCall getConditionActionConditionActionParserRuleCall_3_0() { return cConditionActionConditionActionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRule_setKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConditionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_3_2_0 = (RuleCall)cConditionAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsAtomicActionWithPriorityParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cIfKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1_1 = (Keyword)cGroup_7_1.eContents().get(1);
		private final Assignment cConditionAssignment_7_1_2 = (Assignment)cGroup_7_1.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_7_1_2_0 = (RuleCall)cConditionAssignment_7_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_1_3 = (Keyword)cGroup_7_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cActionsAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cActionsAtomicActionWithPriorityParserRuleCall_7_3_0 = (RuleCall)cActionsAssignment_7_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//RuleSet:
		//	"rule_set" name=ID ":" ("if" "(" condition+=Condition+ ")")? "{" actions+=AtomicActionWithPriority+ "}" ("else" ("if"
		//	"(" condition+=Condition ")")* "{" actions+=AtomicActionWithPriority+ "}")* ";";
		public ParserRule getRule() { return rule; }

		//"rule_set" name=ID ":" ("if" "(" condition+=Condition+ ")")? "{" actions+=AtomicActionWithPriority+ "}" ("else" ("if"
		//"(" condition+=Condition ")")* "{" actions+=AtomicActionWithPriority+ "}")* ";"
		public Group getGroup() { return cGroup; }

		//"rule_set"
		public Keyword getRule_setKeyword_0() { return cRule_setKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("if" "(" condition+=Condition+ ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"if"
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//condition+=Condition+
		public Assignment getConditionAssignment_3_2() { return cConditionAssignment_3_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_2_0() { return cConditionConditionParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//actions+=AtomicActionWithPriority+
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }

		//AtomicActionWithPriority
		public RuleCall getActionsAtomicActionWithPriorityParserRuleCall_5_0() { return cActionsAtomicActionWithPriorityParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//("else" ("if" "(" condition+=Condition ")")* "{" actions+=AtomicActionWithPriority+ "}")*
		public Group getGroup_7() { return cGroup_7; }

		//"else"
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }

		//("if" "(" condition+=Condition ")")*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//"if"
		public Keyword getIfKeyword_7_1_0() { return cIfKeyword_7_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_1_1() { return cLeftParenthesisKeyword_7_1_1; }

		//condition+=Condition
		public Assignment getConditionAssignment_7_1_2() { return cConditionAssignment_7_1_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_7_1_2_0() { return cConditionConditionParserRuleCall_7_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_1_3() { return cRightParenthesisKeyword_7_1_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_2() { return cLeftCurlyBracketKeyword_7_2; }

		//actions+=AtomicActionWithPriority+
		public Assignment getActionsAssignment_7_3() { return cActionsAssignment_7_3; }

		//AtomicActionWithPriority
		public RuleCall getActionsAtomicActionWithPriorityParserRuleCall_7_3_0() { return cActionsAtomicActionWithPriorityParserRuleCall_7_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class AtomicActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSelectActionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cDeselectActionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cModifyAttributeParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cQueryActionParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cANDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AtomicAction:
		//	(SelectAction | DeselectAction | ModifyAttribute | QueryAction) "AND"?;
		public ParserRule getRule() { return rule; }

		//(SelectAction | DeselectAction | ModifyAttribute | QueryAction) "AND"?
		public Group getGroup() { return cGroup; }

		//SelectAction | DeselectAction | ModifyAttribute | QueryAction
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//SelectAction
		public RuleCall getSelectActionParserRuleCall_0_0() { return cSelectActionParserRuleCall_0_0; }

		//DeselectAction
		public RuleCall getDeselectActionParserRuleCall_0_1() { return cDeselectActionParserRuleCall_0_1; }

		//ModifyAttribute
		public RuleCall getModifyAttributeParserRuleCall_0_2() { return cModifyAttributeParserRuleCall_0_2; }

		//QueryAction
		public RuleCall getQueryActionParserRuleCall_0_3() { return cQueryActionParserRuleCall_0_3; }

		//"AND"?
		public Keyword getANDKeyword_1() { return cANDKeyword_1; }
	}

	public class ConditionActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConditionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_0_2_0 = (RuleCall)cConditionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cAtomicActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtomicActionsAtomicActionParserRuleCall_1_0 = (RuleCall)cAtomicActionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElseConditionActionParserRuleCall_2_1_0 = (RuleCall)cElseAssignment_2_1.eContents().get(0);
		
		////ConditionAction :
		////	('if('condition+=Condition+ ')')? '{' atomicActions+=AtomicAction+ '}'
		////;
		//ConditionAction:
		//	("if" "(" condition+=Condition+ ")")? atomicActions+=AtomicAction+ ("else" else=ConditionAction?)?;
		public ParserRule getRule() { return rule; }

		//("if" "(" condition+=Condition+ ")")? atomicActions+=AtomicAction+ ("else" else=ConditionAction?)?
		public Group getGroup() { return cGroup; }

		//("if" "(" condition+=Condition+ ")")?
		public Group getGroup_0() { return cGroup_0; }

		//"if"
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//condition+=Condition+
		public Assignment getConditionAssignment_0_2() { return cConditionAssignment_0_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_2_0() { return cConditionConditionParserRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//atomicActions+=AtomicAction+
		public Assignment getAtomicActionsAssignment_1() { return cAtomicActionsAssignment_1; }

		//AtomicAction
		public RuleCall getAtomicActionsAtomicActionParserRuleCall_1_0() { return cAtomicActionsAtomicActionParserRuleCall_1_0; }

		//("else" else=ConditionAction?)?
		public Group getGroup_2() { return cGroup_2; }

		//"else"
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }

		//else=ConditionAction?
		public Assignment getElseAssignment_2_1() { return cElseAssignment_2_1; }

		//ConditionAction
		public RuleCall getElseConditionActionParserRuleCall_2_1_0() { return cElseConditionActionParserRuleCall_2_1_0; }
	}

	public class AtomicActionWithPriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicActionWithPriority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPriorityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPriorityValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPriorityValueINTTerminalRuleCall_1_0 = (RuleCall)cPriorityValueAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAtomicActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAtomicActionAtomicActionParserRuleCall_3_0 = (RuleCall)cAtomicActionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AtomicActionWithPriority:
		//	"priority" priorityValue=INT "{" atomicAction+=AtomicAction* "}";
		public ParserRule getRule() { return rule; }

		//"priority" priorityValue=INT "{" atomicAction+=AtomicAction* "}"
		public Group getGroup() { return cGroup; }

		//"priority"
		public Keyword getPriorityKeyword_0() { return cPriorityKeyword_0; }

		//priorityValue=INT
		public Assignment getPriorityValueAssignment_1() { return cPriorityValueAssignment_1; }

		//INT
		public RuleCall getPriorityValueINTTerminalRuleCall_1_0() { return cPriorityValueINTTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//atomicAction+=AtomicAction*
		public Assignment getAtomicActionAssignment_3() { return cAtomicActionAssignment_3; }

		//AtomicAction
		public RuleCall getAtomicActionAtomicActionParserRuleCall_3_0() { return cAtomicActionAtomicActionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Assignment cMeasurementComparisonAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMeasurementComparisonMeasurementComparisonParserRuleCall_0 = (RuleCall)cMeasurementComparisonAssignment.eContents().get(0);
		
		////Condition:
		////		measurementComparison+=MeasurementComparison 
		////;
		//Condition:
		//	measurementComparison=MeasurementComparison;
		public ParserRule getRule() { return rule; }

		//measurementComparison=MeasurementComparison
		public Assignment getMeasurementComparisonAssignment() { return cMeasurementComparisonAssignment; }

		//MeasurementComparison
		public RuleCall getMeasurementComparisonMeasurementComparisonParserRuleCall_0() { return cMeasurementComparisonMeasurementComparisonParserRuleCall_0; }
	}

	public class MeasurementComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MeasurementComparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMeasurementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMeasurementContextDependentMeasurementCrossReference_0_0 = (CrossReference)cMeasurementAssignment_0.eContents().get(0);
		private final RuleCall cMeasurementContextDependentMeasurementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cMeasurementContextDependentMeasurementCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOPERATORParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLogicalOpAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLogicalOpLOGICAL_OPERATORParserRuleCall_3_0_0 = (RuleCall)cLogicalOpAssignment_3_0.eContents().get(0);
		private final Assignment cSecondTermAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSecondTermMeasurementComparisonParserRuleCall_3_1_0 = (RuleCall)cSecondTermAssignment_3_1.eContents().get(0);
		
		//// Find a better name for secondTerm
		//// Find a way of using parenthesis for priority between operators
		//// Replace the content of Condition with the content of this term.
		//MeasurementComparison:
		//	measurement=[cdmModel::ContextDependentMeasurement|QualifiedName] operator=OPERATOR value=STRING
		//	(logicalOp=LOGICAL_OPERATOR secondTerm=MeasurementComparison)?;
		public ParserRule getRule() { return rule; }

		//measurement=[cdmModel::ContextDependentMeasurement|QualifiedName] operator=OPERATOR value=STRING
		//(logicalOp=LOGICAL_OPERATOR secondTerm=MeasurementComparison)?
		public Group getGroup() { return cGroup; }

		//measurement=[cdmModel::ContextDependentMeasurement|QualifiedName]
		public Assignment getMeasurementAssignment_0() { return cMeasurementAssignment_0; }

		//[cdmModel::ContextDependentMeasurement|QualifiedName]
		public CrossReference getMeasurementContextDependentMeasurementCrossReference_0_0() { return cMeasurementContextDependentMeasurementCrossReference_0_0; }

		//QualifiedName
		public RuleCall getMeasurementContextDependentMeasurementQualifiedNameParserRuleCall_0_0_1() { return cMeasurementContextDependentMeasurementQualifiedNameParserRuleCall_0_0_1; }

		//operator=OPERATOR
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//OPERATOR
		public RuleCall getOperatorOPERATORParserRuleCall_1_0() { return cOperatorOPERATORParserRuleCall_1_0; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }

		//(logicalOp=LOGICAL_OPERATOR secondTerm=MeasurementComparison)?
		public Group getGroup_3() { return cGroup_3; }

		//logicalOp=LOGICAL_OPERATOR
		public Assignment getLogicalOpAssignment_3_0() { return cLogicalOpAssignment_3_0; }

		//LOGICAL_OPERATOR
		public RuleCall getLogicalOpLOGICAL_OPERATORParserRuleCall_3_0_0() { return cLogicalOpLOGICAL_OPERATORParserRuleCall_3_0_0; }

		//secondTerm=MeasurementComparison
		public Assignment getSecondTermAssignment_3_1() { return cSecondTermAssignment_3_1; }

		//MeasurementComparison
		public RuleCall getSecondTermMeasurementComparisonParserRuleCall_3_1_0() { return cSecondTermMeasurementComparisonParserRuleCall_3_1_0; }
	}

	public class OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		////Condition:
		////	measurement=[ cdmModel::ContextDependentMeasurement|QualifiedName ] OPERATOR STRING 
		////	(LOGICAL_OPERATOR meas+=[Import] OPERATOR STRING)*  
		////;
		//OPERATOR:
		//	"<" | ">" | "==" | "<>";
		public ParserRule getRule() { return rule; }

		//"<" | ">" | "==" | "<>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_3() { return cLessThanSignGreaterThanSignKeyword_3; }
	}

	public class LOGICAL_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOGICAL_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cANDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cORKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LOGICAL_OPERATOR:
		//	"AND" | "OR";
		public ParserRule getRule() { return rule; }

		//"AND" | "OR"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"AND"
		public Keyword getANDKeyword_0() { return cANDKeyword_0; }

		//"OR"
		public Keyword getORKeyword_1() { return cORKeyword_1; }
	}

	public class QueryActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelect_feature_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFrom_variants_of_featureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFeatureFeatureCrossReference_3_0 = (CrossReference)cFeatureAssignment_3.eContents().get(0);
		private final RuleCall cFeatureFeatureQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cFeatureFeatureCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWhere_attribueKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cQueryOperatorParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueSTRINGTerminalRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////MATH_OPERATOR:
		////	MAX | MIN | AVG 
		////;
		////
		////AVG:
		////	'AVG (' (measurement+=[ cdmModel::ContextDependentMeasurement|QualifiedName ] ',')+ ')' 
		////;
		////
		////MIN:
		////	'MIN (' (measurement+=[ cdmModel::ContextDependentMeasurement|QualifiedName ] ',')+ ')'
		////;
		////
		////MAX:
		////	'MAX (' (measurement+=[ cdmModel::ContextDependentMeasurement|QualifiedName ] ',')+ ')'
		////;
		//QueryAction:
		//	"select_feature_*" "from_variants_of_feature" "(" feature=[featureModel::Feature|QualifiedName] ")" "where_attribue"
		//	QueryOperator "(" value=STRING ")";
		public ParserRule getRule() { return rule; }

		//"select_feature_*" "from_variants_of_feature" "(" feature=[featureModel::Feature|QualifiedName] ")" "where_attribue"
		//QueryOperator "(" value=STRING ")"
		public Group getGroup() { return cGroup; }

		//"select_feature_*"
		public Keyword getSelect_feature_Keyword_0() { return cSelect_feature_Keyword_0; }

		//"from_variants_of_feature"
		public Keyword getFrom_variants_of_featureKeyword_1() { return cFrom_variants_of_featureKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//feature=[featureModel::Feature|QualifiedName]
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }

		//[featureModel::Feature|QualifiedName]
		public CrossReference getFeatureFeatureCrossReference_3_0() { return cFeatureFeatureCrossReference_3_0; }

		//QualifiedName
		public RuleCall getFeatureFeatureQualifiedNameParserRuleCall_3_0_1() { return cFeatureFeatureQualifiedNameParserRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"where_attribue"
		public Keyword getWhere_attribueKeyword_5() { return cWhere_attribueKeyword_5; }

		//QueryOperator
		public RuleCall getQueryOperatorParserRuleCall_6() { return cQueryOperatorParserRuleCall_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//value=STRING
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_8_0() { return cValueSTRINGTerminalRuleCall_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}

	public class QueryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMaxKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMinKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//QueryOperator:
		//	"max" | "min";
		public ParserRule getRule() { return rule; }

		//"max" | "min"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"max"
		public Keyword getMaxKeyword_0() { return cMaxKeyword_0; }

		//"min"
		public Keyword getMinKeyword_1() { return cMinKeyword_1; }
	}

	public class SelectActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivate_featureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureFeatureCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cFeatureFeatureCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////QueryAction:
		////SELECT_WHERE MATH_OPERATOR  
		////FROM feature+=[Import] 
		////(LOGICAL_OPERATOR SELECT WHERE mathOp+=MATH_OPERATOR FROM feature+=[Import])*
		////;
		//SelectAction:
		//	"activate_feature" "(" feature=[featureModel::Feature|QualifiedName] ")";
		public ParserRule getRule() { return rule; }

		//"activate_feature" "(" feature=[featureModel::Feature|QualifiedName] ")"
		public Group getGroup() { return cGroup; }

		//"activate_feature"
		public Keyword getActivate_featureKeyword_0() { return cActivate_featureKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//feature=[featureModel::Feature|QualifiedName]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//[featureModel::Feature|QualifiedName]
		public CrossReference getFeatureFeatureCrossReference_2_0() { return cFeatureFeatureCrossReference_2_0; }

		//QualifiedName
		public RuleCall getFeatureFeatureQualifiedNameParserRuleCall_2_0_1() { return cFeatureFeatureQualifiedNameParserRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class DeselectActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeselectAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeactivate_featureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureFeatureCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cFeatureFeatureCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DeselectAction:
		//	"deactivate_feature" "(" feature=[featureModel::Feature|QualifiedName] ")";
		public ParserRule getRule() { return rule; }

		//"deactivate_feature" "(" feature=[featureModel::Feature|QualifiedName] ")"
		public Group getGroup() { return cGroup; }

		//"deactivate_feature"
		public Keyword getDeactivate_featureKeyword_0() { return cDeactivate_featureKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//feature=[featureModel::Feature|QualifiedName]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//[featureModel::Feature|QualifiedName]
		public CrossReference getFeatureFeatureCrossReference_2_0() { return cFeatureFeatureCrossReference_2_0; }

		//QualifiedName
		public RuleCall getFeatureFeatureQualifiedNameParserRuleCall_2_0_1() { return cFeatureFeatureQualifiedNameParserRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ModifyAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModifyAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSet_attributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureAttributeCVAttributeCrossReference_2_0 = (CrossReference)cFeatureAttributeAssignment_2.eContents().get(0);
		private final RuleCall cFeatureAttributeCVAttributeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cFeatureAttributeCVAttributeCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWith_valueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributeValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributeValueAttributeValueParserRuleCall_6_0 = (RuleCall)cAttributeValueAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ModifyAttribute:
		//	"set_attribute" "(" featureAttribute=[rtFeatureModel::CVAttribute|QualifiedName] ")" "with_value" "("
		//	attributeValue+=AttributeValue ")";
		public ParserRule getRule() { return rule; }

		//"set_attribute" "(" featureAttribute=[rtFeatureModel::CVAttribute|QualifiedName] ")" "with_value" "("
		//attributeValue+=AttributeValue ")"
		public Group getGroup() { return cGroup; }

		//"set_attribute"
		public Keyword getSet_attributeKeyword_0() { return cSet_attributeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//featureAttribute=[rtFeatureModel::CVAttribute|QualifiedName]
		public Assignment getFeatureAttributeAssignment_2() { return cFeatureAttributeAssignment_2; }

		//[rtFeatureModel::CVAttribute|QualifiedName]
		public CrossReference getFeatureAttributeCVAttributeCrossReference_2_0() { return cFeatureAttributeCVAttributeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getFeatureAttributeCVAttributeQualifiedNameParserRuleCall_2_0_1() { return cFeatureAttributeCVAttributeQualifiedNameParserRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"with_value"
		public Keyword getWith_valueKeyword_4() { return cWith_valueKeyword_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//attributeValue+=AttributeValue
		public Assignment getAttributeValueAssignment_6() { return cAttributeValueAssignment_6; }

		//AttributeValue
		public RuleCall getAttributeValueAttributeValueParserRuleCall_6_0() { return cAttributeValueAttributeValueParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringAttributeValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNFRAttributeValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttributeValue:
		//	StringAttributeValue | NFRAttributeValue;
		public ParserRule getRule() { return rule; }

		//StringAttributeValue | NFRAttributeValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringAttributeValue
		public RuleCall getStringAttributeValueParserRuleCall_0() { return cStringAttributeValueParserRuleCall_0; }

		//NFRAttributeValue
		public RuleCall getNFRAttributeValueParserRuleCall_1() { return cNFRAttributeValueParserRuleCall_1; }
	}

	public class StringAttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringAttributeValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringAttributeValue:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NFRAttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NFRAttributeValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueNFRAttributeCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueNFRAttributeQualifiedNameParserRuleCall_0_1 = (RuleCall)cValueNFRAttributeCrossReference_0.eContents().get(1);
		
		//NFRAttributeValue:
		//	value=[rtFeatureModel::NFRAttribute|QualifiedName];
		public ParserRule getRule() { return rule; }

		//value=[rtFeatureModel::NFRAttribute|QualifiedName]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[rtFeatureModel::NFRAttribute|QualifiedName]
		public CrossReference getValueNFRAttributeCrossReference_0() { return cValueNFRAttributeCrossReference_0; }

		//QualifiedName
		public RuleCall getValueNFRAttributeQualifiedNameParserRuleCall_0_1() { return cValueNFRAttributeQualifiedNameParserRuleCall_0_1; }
	}
	
	
	private AdaptationModelElements pAdaptationModel;
	private ImportElements pImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private AdaptationRuleElements pAdaptationRule;
	private AtomicRuleElements pAtomicRule;
	private RuleSetElements pRuleSet;
	private AtomicActionElements pAtomicAction;
	private ConditionActionElements pConditionAction;
	private AtomicActionWithPriorityElements pAtomicActionWithPriority;
	private ConditionElements pCondition;
	private MeasurementComparisonElements pMeasurementComparison;
	private OPERATORElements pOPERATOR;
	private LOGICAL_OPERATORElements pLOGICAL_OPERATOR;
	private QueryActionElements pQueryAction;
	private QueryOperatorElements pQueryOperator;
	private SelectActionElements pSelectAction;
	private DeselectActionElements pDeselectAction;
	private ModifyAttributeElements pModifyAttribute;
	private AttributeValueElements pAttributeValue;
	private StringAttributeValueElements pStringAttributeValue;
	private NFRAttributeValueElements pNFRAttributeValue;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AdaptationModelDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.rra.adaptationModel.AdaptationModelDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// 	(rules+=Rule*)
	//// 	(ruleSets+=RuleSet*);
	//AdaptationModel:
	//	imports+=Import* "name" name=QualifiedName ";" "frequency" frequency=INT ";" adaptationRules+=AdaptationRule*;
	public AdaptationModelElements getAdaptationModelAccess() {
		return (pAdaptationModel != null) ? pAdaptationModel : (pAdaptationModel = new AdaptationModelElements());
	}
	
	public ParserRule getAdaptationModelRule() {
		return getAdaptationModelAccess().getRule();
	}

	////terminal NUMBER returns ecore::EBigDecimal:
	////    (('0'..'9')+ ('.' ('0'..'9')*)? | '.' ('0'..'9')+)
	////    (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
	////;
	////terminal VALUE returns ecore::EString: '"' ('0'..'9' | 'a'..'z' | '0'..'9' '.' '0'..'9')+'"';
	////terminal AND             returns ecore::EString: 'AND';
	////terminal OR              returns ecore::EString:  'OR' ;
	////terminal IF              returns ecore::EString: 'if';
	////terminal ELSE            returns ecore::EString: 'else';
	////terminal THEN            returns ecore::EString: 'then';
	////terminal RULE_TERMINAL   returns ecore::EString: 'rule';
	////terminal SELECT          returns ecore::EString: 'select feature';
	////terminal DESELECT        returns ecore::EString: 'deselect feature';
	////terminal CHANGE          returns ecore::EString: 'change feature attribute';
	////terminal WITH            returns ecore::EString: 'with';
	////terminal IMPORT_TERMINAL returns ecore::EString: 'import';
	////terminal AS              returns ecore::EString: 'as';
	////terminal SMALLER		 returns ecore::EString: '<';
	////terminal BIGGER			 returns ecore::EString: '>';
	////terminal EQUAL		     returns ecore::EString: '==';
	////terminal NOT_EQUAL		returns ecore::EString: '<>'
	////terminal SELECT_WHERE    returns ecore::EString: 'select feature * where';
	////terminal FROM 		   returns ecore::EString: 'from';
	//Import:
	//	"import" importURI=STRING //AS name=ID
	//	";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//AdaptationRule:
	//	AtomicRule | RuleSet;
	public AdaptationRuleElements getAdaptationRuleAccess() {
		return (pAdaptationRule != null) ? pAdaptationRule : (pAdaptationRule = new AdaptationRuleElements());
	}
	
	public ParserRule getAdaptationRuleRule() {
		return getAdaptationRuleAccess().getRule();
	}

	//// It's necessary that condition and action are part of the same element
	////AtomicRule:
	////	'rule' name=ID ':' 
	////	('if' '(' condition+=Condition+ ')')? (atomicAction+=AtomicAction+) 
	////	('else' ('if' '(' condition+=Condition ')' )* atomicAction+=AtomicAction+)* ';'
	////;
	////	('else' conditionAction+=ConditionAction)* ';'
	//AtomicRule:
	//	"rule" name=ID ":" conditionAction+=ConditionAction ";";
	public AtomicRuleElements getAtomicRuleAccess() {
		return (pAtomicRule != null) ? pAtomicRule : (pAtomicRule = new AtomicRuleElements());
	}
	
	public ParserRule getAtomicRuleRule() {
		return getAtomicRuleAccess().getRule();
	}

	//RuleSet:
	//	"rule_set" name=ID ":" ("if" "(" condition+=Condition+ ")")? "{" actions+=AtomicActionWithPriority+ "}" ("else" ("if"
	//	"(" condition+=Condition ")")* "{" actions+=AtomicActionWithPriority+ "}")* ";";
	public RuleSetElements getRuleSetAccess() {
		return (pRuleSet != null) ? pRuleSet : (pRuleSet = new RuleSetElements());
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}

	//AtomicAction:
	//	(SelectAction | DeselectAction | ModifyAttribute | QueryAction) "AND"?;
	public AtomicActionElements getAtomicActionAccess() {
		return (pAtomicAction != null) ? pAtomicAction : (pAtomicAction = new AtomicActionElements());
	}
	
	public ParserRule getAtomicActionRule() {
		return getAtomicActionAccess().getRule();
	}

	////ConditionAction :
	////	('if('condition+=Condition+ ')')? '{' atomicActions+=AtomicAction+ '}'
	////;
	//ConditionAction:
	//	("if" "(" condition+=Condition+ ")")? atomicActions+=AtomicAction+ ("else" else=ConditionAction?)?;
	public ConditionActionElements getConditionActionAccess() {
		return (pConditionAction != null) ? pConditionAction : (pConditionAction = new ConditionActionElements());
	}
	
	public ParserRule getConditionActionRule() {
		return getConditionActionAccess().getRule();
	}

	//AtomicActionWithPriority:
	//	"priority" priorityValue=INT "{" atomicAction+=AtomicAction* "}";
	public AtomicActionWithPriorityElements getAtomicActionWithPriorityAccess() {
		return (pAtomicActionWithPriority != null) ? pAtomicActionWithPriority : (pAtomicActionWithPriority = new AtomicActionWithPriorityElements());
	}
	
	public ParserRule getAtomicActionWithPriorityRule() {
		return getAtomicActionWithPriorityAccess().getRule();
	}

	////Condition:
	////		measurementComparison+=MeasurementComparison 
	////;
	//Condition:
	//	measurementComparison=MeasurementComparison;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//// Find a better name for secondTerm
	//// Find a way of using parenthesis for priority between operators
	//// Replace the content of Condition with the content of this term.
	//MeasurementComparison:
	//	measurement=[cdmModel::ContextDependentMeasurement|QualifiedName] operator=OPERATOR value=STRING
	//	(logicalOp=LOGICAL_OPERATOR secondTerm=MeasurementComparison)?;
	public MeasurementComparisonElements getMeasurementComparisonAccess() {
		return (pMeasurementComparison != null) ? pMeasurementComparison : (pMeasurementComparison = new MeasurementComparisonElements());
	}
	
	public ParserRule getMeasurementComparisonRule() {
		return getMeasurementComparisonAccess().getRule();
	}

	////Condition:
	////	measurement=[ cdmModel::ContextDependentMeasurement|QualifiedName ] OPERATOR STRING 
	////	(LOGICAL_OPERATOR meas+=[Import] OPERATOR STRING)*  
	////;
	//OPERATOR:
	//	"<" | ">" | "==" | "<>";
	public OPERATORElements getOPERATORAccess() {
		return (pOPERATOR != null) ? pOPERATOR : (pOPERATOR = new OPERATORElements());
	}
	
	public ParserRule getOPERATORRule() {
		return getOPERATORAccess().getRule();
	}

	//LOGICAL_OPERATOR:
	//	"AND" | "OR";
	public LOGICAL_OPERATORElements getLOGICAL_OPERATORAccess() {
		return (pLOGICAL_OPERATOR != null) ? pLOGICAL_OPERATOR : (pLOGICAL_OPERATOR = new LOGICAL_OPERATORElements());
	}
	
	public ParserRule getLOGICAL_OPERATORRule() {
		return getLOGICAL_OPERATORAccess().getRule();
	}

	////MATH_OPERATOR:
	////	MAX | MIN | AVG 
	////;
	////
	////AVG:
	////	'AVG (' (measurement+=[ cdmModel::ContextDependentMeasurement|QualifiedName ] ',')+ ')' 
	////;
	////
	////MIN:
	////	'MIN (' (measurement+=[ cdmModel::ContextDependentMeasurement|QualifiedName ] ',')+ ')'
	////;
	////
	////MAX:
	////	'MAX (' (measurement+=[ cdmModel::ContextDependentMeasurement|QualifiedName ] ',')+ ')'
	////;
	//QueryAction:
	//	"select_feature_*" "from_variants_of_feature" "(" feature=[featureModel::Feature|QualifiedName] ")" "where_attribue"
	//	QueryOperator "(" value=STRING ")";
	public QueryActionElements getQueryActionAccess() {
		return (pQueryAction != null) ? pQueryAction : (pQueryAction = new QueryActionElements());
	}
	
	public ParserRule getQueryActionRule() {
		return getQueryActionAccess().getRule();
	}

	//QueryOperator:
	//	"max" | "min";
	public QueryOperatorElements getQueryOperatorAccess() {
		return (pQueryOperator != null) ? pQueryOperator : (pQueryOperator = new QueryOperatorElements());
	}
	
	public ParserRule getQueryOperatorRule() {
		return getQueryOperatorAccess().getRule();
	}

	////QueryAction:
	////SELECT_WHERE MATH_OPERATOR  
	////FROM feature+=[Import] 
	////(LOGICAL_OPERATOR SELECT WHERE mathOp+=MATH_OPERATOR FROM feature+=[Import])*
	////;
	//SelectAction:
	//	"activate_feature" "(" feature=[featureModel::Feature|QualifiedName] ")";
	public SelectActionElements getSelectActionAccess() {
		return (pSelectAction != null) ? pSelectAction : (pSelectAction = new SelectActionElements());
	}
	
	public ParserRule getSelectActionRule() {
		return getSelectActionAccess().getRule();
	}

	//DeselectAction:
	//	"deactivate_feature" "(" feature=[featureModel::Feature|QualifiedName] ")";
	public DeselectActionElements getDeselectActionAccess() {
		return (pDeselectAction != null) ? pDeselectAction : (pDeselectAction = new DeselectActionElements());
	}
	
	public ParserRule getDeselectActionRule() {
		return getDeselectActionAccess().getRule();
	}

	//ModifyAttribute:
	//	"set_attribute" "(" featureAttribute=[rtFeatureModel::CVAttribute|QualifiedName] ")" "with_value" "("
	//	attributeValue+=AttributeValue ")";
	public ModifyAttributeElements getModifyAttributeAccess() {
		return (pModifyAttribute != null) ? pModifyAttribute : (pModifyAttribute = new ModifyAttributeElements());
	}
	
	public ParserRule getModifyAttributeRule() {
		return getModifyAttributeAccess().getRule();
	}

	//AttributeValue:
	//	StringAttributeValue | NFRAttributeValue;
	public AttributeValueElements getAttributeValueAccess() {
		return (pAttributeValue != null) ? pAttributeValue : (pAttributeValue = new AttributeValueElements());
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}

	//StringAttributeValue:
	//	value=STRING;
	public StringAttributeValueElements getStringAttributeValueAccess() {
		return (pStringAttributeValue != null) ? pStringAttributeValue : (pStringAttributeValue = new StringAttributeValueElements());
	}
	
	public ParserRule getStringAttributeValueRule() {
		return getStringAttributeValueAccess().getRule();
	}

	//NFRAttributeValue:
	//	value=[rtFeatureModel::NFRAttribute|QualifiedName];
	public NFRAttributeValueElements getNFRAttributeValueAccess() {
		return (pNFRAttributeValue != null) ? pNFRAttributeValue : (pNFRAttributeValue = new NFRAttributeValueElements());
	}
	
	public ParserRule getNFRAttributeValueRule() {
		return getNFRAttributeValueAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
