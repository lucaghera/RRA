/*
* generated by Xtext
*/
package org.rra.adaptationModel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AdaptationModelDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AdaptationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdaptationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//AdaptationModel:
		//	imports+=Import* rules+=Rule*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* rules+=Rule*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		////terminal VALUE returns ecore::EString: '"' ('0'..'9' | 'a'..'z' | '0'..'9' '.' '0'..'9')+'"';
		////terminal AND             returns ecore::EString: 'AND';
		////terminal OR              returns ecore::EString:  'OR' ;
		////terminal IF              returns ecore::EString: 'if';
		////terminal ELSE            returns ecore::EString: 'else';
		////terminal THEN            returns ecore::EString: 'then';
		////terminal RULE_TERMINAL   returns ecore::EString: 'rule';
		////terminal SELECT          returns ecore::EString: 'select feature';
		////terminal DESELECT        returns ecore::EString: 'deselect feature';
		////terminal CHANGE          returns ecore::EString: 'change feature attribute';
		////terminal WITH            returns ecore::EString: 'with';
		////terminal IMPORT_TERMINAL returns ecore::EString: 'import';
		////terminal AS              returns ecore::EString: 'as';
		////terminal SMALLER		 returns ecore::EString: '<';
		////terminal BIGGER			 returns ecore::EString: '>';
		////terminal EQUAL		     returns ecore::EString: '==';
		////terminal NOT_EQUAL		returns ecore::EString: '<>'
		////terminal SELECT_WHERE    returns ecore::EString: 'select feature * where';
		////terminal FROM 		   returns ecore::EString: 'from';
		//Import:
		//	"import" importURI= //AS name=ID
		//	STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI= //AS name=ID
		//STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI= //AS name=ID
		//STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		////AS name=ID
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionConditionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAtomicActionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAtomicActionAtomicActionParserRuleCall_6_0 = (RuleCall)cAtomicActionAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cIfKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cConditionAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_7_1_1_0 = (RuleCall)cConditionAssignment_7_1_1.eContents().get(0);
		private final Keyword cThenKeyword_7_1_2 = (Keyword)cGroup_7_1.eContents().get(2);
		private final Assignment cAtomicActionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cAtomicActionAtomicActionParserRuleCall_7_2_0 = (RuleCall)cAtomicActionAssignment_7_2.eContents().get(0);
		
		//Rule:
		//	"rule" name=ID ":" "if" condition+=Condition "then" atomicAction+=AtomicAction+ ("else" ("if" condition+=Condition
		//	"then")* atomicAction+=AtomicAction+)*;
		public ParserRule getRule() { return rule; }

		//"rule" name=ID ":" "if" condition+=Condition "then" atomicAction+=AtomicAction+ ("else" ("if" condition+=Condition
		//"then")* atomicAction+=AtomicAction+)*
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"if"
		public Keyword getIfKeyword_3() { return cIfKeyword_3; }

		//condition+=Condition
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_4_0() { return cConditionConditionParserRuleCall_4_0; }

		//"then"
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }

		//atomicAction+=AtomicAction+
		public Assignment getAtomicActionAssignment_6() { return cAtomicActionAssignment_6; }

		//AtomicAction
		public RuleCall getAtomicActionAtomicActionParserRuleCall_6_0() { return cAtomicActionAtomicActionParserRuleCall_6_0; }

		//("else" ("if" condition+=Condition "then")* atomicAction+=AtomicAction+)*
		public Group getGroup_7() { return cGroup_7; }

		//"else"
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }

		//("if" condition+=Condition "then")*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//"if"
		public Keyword getIfKeyword_7_1_0() { return cIfKeyword_7_1_0; }

		//condition+=Condition
		public Assignment getConditionAssignment_7_1_1() { return cConditionAssignment_7_1_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_7_1_1_0() { return cConditionConditionParserRuleCall_7_1_1_0; }

		//"then"
		public Keyword getThenKeyword_7_1_2() { return cThenKeyword_7_1_2; }

		//atomicAction+=AtomicAction+
		public Assignment getAtomicActionAssignment_7_2() { return cAtomicActionAssignment_7_2; }

		//AtomicAction
		public RuleCall getAtomicActionAtomicActionParserRuleCall_7_2_0() { return cAtomicActionAtomicActionParserRuleCall_7_2_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Assignment cMeasurementComparisonAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMeasurementComparisonMeasurementComparisonParserRuleCall_0 = (RuleCall)cMeasurementComparisonAssignment.eContents().get(0);
		
		//Condition:
		//	measurementComparison+=MeasurementComparison;
		public ParserRule getRule() { return rule; }

		//measurementComparison+=MeasurementComparison
		public Assignment getMeasurementComparisonAssignment() { return cMeasurementComparisonAssignment; }

		//MeasurementComparison
		public RuleCall getMeasurementComparisonMeasurementComparisonParserRuleCall_0() { return cMeasurementComparisonMeasurementComparisonParserRuleCall_0; }
	}

	public class MeasurementComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MeasurementComparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMeasurementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMeasurementContextDependentMeasurementCrossReference_0_0 = (CrossReference)cMeasurementAssignment_0.eContents().get(0);
		private final RuleCall cMeasurementContextDependentMeasurementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cMeasurementContextDependentMeasurementCrossReference_0_0.eContents().get(1);
		private final RuleCall cOPERATORParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLOGICAL_OPERATORParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//MeasurementComparison:
		//	measurement=[cdmModel::ContextDependentMeasurement|QualifiedName] OPERATOR STRING LOGICAL_OPERATOR?;
		public ParserRule getRule() { return rule; }

		//measurement=[cdmModel::ContextDependentMeasurement|QualifiedName] OPERATOR STRING LOGICAL_OPERATOR?
		public Group getGroup() { return cGroup; }

		//measurement=[cdmModel::ContextDependentMeasurement|QualifiedName]
		public Assignment getMeasurementAssignment_0() { return cMeasurementAssignment_0; }

		//[cdmModel::ContextDependentMeasurement|QualifiedName]
		public CrossReference getMeasurementContextDependentMeasurementCrossReference_0_0() { return cMeasurementContextDependentMeasurementCrossReference_0_0; }

		//QualifiedName
		public RuleCall getMeasurementContextDependentMeasurementQualifiedNameParserRuleCall_0_0_1() { return cMeasurementContextDependentMeasurementQualifiedNameParserRuleCall_0_0_1; }

		//OPERATOR
		public RuleCall getOPERATORParserRuleCall_1() { return cOPERATORParserRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//LOGICAL_OPERATOR?
		public RuleCall getLOGICAL_OPERATORParserRuleCall_3() { return cLOGICAL_OPERATORParserRuleCall_3; }
	}

	public class OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		////Condition:
		////	measurement=[ cdmModel::ContextDependentMeasurement|QualifiedName ] OPERATOR STRING 
		////	(LOGICAL_OPERATOR meas+=[Import] OPERATOR STRING)*  
		////;
		//OPERATOR:
		//	"<" | ">" | "==" | "<>";
		public ParserRule getRule() { return rule; }

		//"<" | ">" | "==" | "<>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_3() { return cLessThanSignGreaterThanSignKeyword_3; }
	}

	public class LOGICAL_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOGICAL_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cANDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cORKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LOGICAL_OPERATOR:
		//	"AND" | "OR";
		public ParserRule getRule() { return rule; }

		//"AND" | "OR"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"AND"
		public Keyword getANDKeyword_0() { return cANDKeyword_0; }

		//"OR"
		public Keyword getORKeyword_1() { return cORKeyword_1; }
	}

	public class MATH_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MATH_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMaxKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMinKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAvgKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCountKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//MATH_OPERATOR:
		//	"max" | "min" | "avg" | "count";
		public ParserRule getRule() { return rule; }

		//"max" | "min" | "avg" | "count"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"max"
		public Keyword getMaxKeyword_0() { return cMaxKeyword_0; }

		//"min"
		public Keyword getMinKeyword_1() { return cMinKeyword_1; }

		//"avg"
		public Keyword getAvgKeyword_2() { return cAvgKeyword_2; }

		//"count"
		public Keyword getCountKeyword_3() { return cCountKeyword_3; }
	}

	public class AVGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AVG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAVGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMeasurementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cMeasurementImportCrossReference_1_0_0 = (CrossReference)cMeasurementAssignment_1_0.eContents().get(0);
		private final RuleCall cMeasurementImportIDTerminalRuleCall_1_0_0_1 = (RuleCall)cMeasurementImportCrossReference_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AVG:
		//	"AVG (" (measurement+=[Import] ",")+ ")";
		public ParserRule getRule() { return rule; }

		//"AVG (" (measurement+=[Import] ",")+ ")"
		public Group getGroup() { return cGroup; }

		//"AVG ("
		public Keyword getAVGKeyword_0() { return cAVGKeyword_0; }

		//(measurement+=[Import] ",")+
		public Group getGroup_1() { return cGroup_1; }

		//measurement+=[Import]
		public Assignment getMeasurementAssignment_1_0() { return cMeasurementAssignment_1_0; }

		//[Import]
		public CrossReference getMeasurementImportCrossReference_1_0_0() { return cMeasurementImportCrossReference_1_0_0; }

		//ID
		public RuleCall getMeasurementImportIDTerminalRuleCall_1_0_0_1() { return cMeasurementImportIDTerminalRuleCall_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class MINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MIN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMeasurementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cMeasurementImportCrossReference_1_0_0 = (CrossReference)cMeasurementAssignment_1_0.eContents().get(0);
		private final RuleCall cMeasurementImportIDTerminalRuleCall_1_0_0_1 = (RuleCall)cMeasurementImportCrossReference_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MIN:
		//	"MIN (" (measurement+=[Import] ",")+ ")";
		public ParserRule getRule() { return rule; }

		//"MIN (" (measurement+=[Import] ",")+ ")"
		public Group getGroup() { return cGroup; }

		//"MIN ("
		public Keyword getMINKeyword_0() { return cMINKeyword_0; }

		//(measurement+=[Import] ",")+
		public Group getGroup_1() { return cGroup_1; }

		//measurement+=[Import]
		public Assignment getMeasurementAssignment_1_0() { return cMeasurementAssignment_1_0; }

		//[Import]
		public CrossReference getMeasurementImportCrossReference_1_0_0() { return cMeasurementImportCrossReference_1_0_0; }

		//ID
		public RuleCall getMeasurementImportIDTerminalRuleCall_1_0_0_1() { return cMeasurementImportIDTerminalRuleCall_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class MAXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMAXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMeasurementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cMeasurementImportCrossReference_1_0_0 = (CrossReference)cMeasurementAssignment_1_0.eContents().get(0);
		private final RuleCall cMeasurementImportIDTerminalRuleCall_1_0_0_1 = (RuleCall)cMeasurementImportCrossReference_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MAX:
		//	"MAX (" (measurement+=[Import] ",")+ ")";
		public ParserRule getRule() { return rule; }

		//"MAX (" (measurement+=[Import] ",")+ ")"
		public Group getGroup() { return cGroup; }

		//"MAX ("
		public Keyword getMAXKeyword_0() { return cMAXKeyword_0; }

		//(measurement+=[Import] ",")+
		public Group getGroup_1() { return cGroup_1; }

		//measurement+=[Import]
		public Assignment getMeasurementAssignment_1_0() { return cMeasurementAssignment_1_0; }

		//[Import]
		public CrossReference getMeasurementImportCrossReference_1_0_0() { return cMeasurementImportCrossReference_1_0_0; }

		//ID
		public RuleCall getMeasurementImportIDTerminalRuleCall_1_0_0_1() { return cMeasurementImportIDTerminalRuleCall_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class AtomicActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeselectActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModifyAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cQueryActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AtomicAction:
		//	SelectAction | DeselectAction | ModifyAttribute | QueryAction;
		public ParserRule getRule() { return rule; }

		//SelectAction | DeselectAction | ModifyAttribute | QueryAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//SelectAction
		public RuleCall getSelectActionParserRuleCall_0() { return cSelectActionParserRuleCall_0; }

		//DeselectAction
		public RuleCall getDeselectActionParserRuleCall_1() { return cDeselectActionParserRuleCall_1; }

		//ModifyAttribute
		public RuleCall getModifyAttributeParserRuleCall_2() { return cModifyAttributeParserRuleCall_2; }

		//QueryAction
		public RuleCall getQueryActionParserRuleCall_3() { return cQueryActionParserRuleCall_3; }
	}

	public class QueryActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cMATH_OPERATORParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cAttributeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cFromFeatureKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFeatureAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cFeatureFeatureCrossReference_6_0 = (CrossReference)cFeatureAssignment_6.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_6_0_1 = (RuleCall)cFeatureFeatureCrossReference_6_0.eContents().get(1);
		
		//QueryAction:
		//	"select feature" "with" MATH_OPERATOR "attribute" STRING "from feature" feature=[featureModel::Feature];
		public ParserRule getRule() { return rule; }

		//"select feature" "with" MATH_OPERATOR "attribute" STRING "from feature" feature=[featureModel::Feature]
		public Group getGroup() { return cGroup; }

		//"select feature"
		public Keyword getSelectFeatureKeyword_0() { return cSelectFeatureKeyword_0; }

		//"with"
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }

		//MATH_OPERATOR
		public RuleCall getMATH_OPERATORParserRuleCall_2() { return cMATH_OPERATORParserRuleCall_2; }

		//"attribute"
		public Keyword getAttributeKeyword_3() { return cAttributeKeyword_3; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }

		//"from feature"
		public Keyword getFromFeatureKeyword_5() { return cFromFeatureKeyword_5; }

		//feature=[featureModel::Feature]
		public Assignment getFeatureAssignment_6() { return cFeatureAssignment_6; }

		//[featureModel::Feature]
		public CrossReference getFeatureFeatureCrossReference_6_0() { return cFeatureFeatureCrossReference_6_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_6_0_1() { return cFeatureFeatureIDTerminalRuleCall_6_0_1; }
	}

	public class SelectActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_0.eContents().get(1);
		
		////QueryAction:
		////SELECT_WHERE MATH_OPERATOR  
		////FROM feature+=[Import] 
		////(LOGICAL_OPERATOR SELECT WHERE mathOp+=MATH_OPERATOR FROM feature+=[Import])*
		////;
		//SelectAction:
		//	"select feature" feature=[featureModel::Feature];
		public ParserRule getRule() { return rule; }

		//"select feature" feature=[featureModel::Feature]
		public Group getGroup() { return cGroup; }

		//"select feature"
		public Keyword getSelectFeatureKeyword_0() { return cSelectFeatureKeyword_0; }

		//feature=[featureModel::Feature]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[featureModel::Feature]
		public CrossReference getFeatureFeatureCrossReference_1_0() { return cFeatureFeatureCrossReference_1_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_1_0_1() { return cFeatureFeatureIDTerminalRuleCall_1_0_1; }
	}

	public class DeselectActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeselectAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeselectFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_0.eContents().get(1);
		
		//DeselectAction:
		//	"deselect feature" feature=[featureModel::Feature];
		public ParserRule getRule() { return rule; }

		//"deselect feature" feature=[featureModel::Feature]
		public Group getGroup() { return cGroup; }

		//"deselect feature"
		public Keyword getDeselectFeatureKeyword_0() { return cDeselectFeatureKeyword_0; }

		//feature=[featureModel::Feature]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[featureModel::Feature]
		public CrossReference getFeatureFeatureCrossReference_1_0() { return cFeatureFeatureCrossReference_1_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_1_0_1() { return cFeatureFeatureIDTerminalRuleCall_1_0_1; }
	}

	public class ModifyAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModifyAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureAttributeCVAttributeCrossReference_1_0 = (CrossReference)cFeatureAttributeAssignment_1.eContents().get(0);
		private final RuleCall cFeatureAttributeCVAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureAttributeCVAttributeCrossReference_1_0.eContents().get(1);
		private final Keyword cWithValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeValueAttributeValueParserRuleCall_3_0 = (RuleCall)cAttributeValueAssignment_3.eContents().get(0);
		
		//ModifyAttribute:
		//	"set attribute" featureAttribute=[rtFeatureModel::CVAttribute] "with value" attributeValue+=AttributeValue;
		public ParserRule getRule() { return rule; }

		//"set attribute" featureAttribute=[rtFeatureModel::CVAttribute] "with value" attributeValue+=AttributeValue
		public Group getGroup() { return cGroup; }

		//"set attribute"
		public Keyword getSetAttributeKeyword_0() { return cSetAttributeKeyword_0; }

		//featureAttribute=[rtFeatureModel::CVAttribute]
		public Assignment getFeatureAttributeAssignment_1() { return cFeatureAttributeAssignment_1; }

		//[rtFeatureModel::CVAttribute]
		public CrossReference getFeatureAttributeCVAttributeCrossReference_1_0() { return cFeatureAttributeCVAttributeCrossReference_1_0; }

		//ID
		public RuleCall getFeatureAttributeCVAttributeIDTerminalRuleCall_1_0_1() { return cFeatureAttributeCVAttributeIDTerminalRuleCall_1_0_1; }

		//"with value"
		public Keyword getWithValueKeyword_2() { return cWithValueKeyword_2; }

		//attributeValue+=AttributeValue
		public Assignment getAttributeValueAssignment_3() { return cAttributeValueAssignment_3; }

		//AttributeValue
		public RuleCall getAttributeValueAttributeValueParserRuleCall_3_0() { return cAttributeValueAttributeValueParserRuleCall_3_0; }
	}

	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringAttributeValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNFRAttributeValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttributeValue:
		//	StringAttributeValue | NFRAttributeValue;
		public ParserRule getRule() { return rule; }

		//StringAttributeValue | NFRAttributeValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringAttributeValue
		public RuleCall getStringAttributeValueParserRuleCall_0() { return cStringAttributeValueParserRuleCall_0; }

		//NFRAttributeValue
		public RuleCall getNFRAttributeValueParserRuleCall_1() { return cNFRAttributeValueParserRuleCall_1; }
	}

	public class StringAttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringAttributeValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringAttributeValue:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NFRAttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NFRAttributeValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueNFRAttributeCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueNFRAttributeQualifiedNameParserRuleCall_0_1 = (RuleCall)cValueNFRAttributeCrossReference_0.eContents().get(1);
		
		//NFRAttributeValue:
		//	value=[rtFeatureModel::NFRAttribute|QualifiedName];
		public ParserRule getRule() { return rule; }

		//value=[rtFeatureModel::NFRAttribute|QualifiedName]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[rtFeatureModel::NFRAttribute|QualifiedName]
		public CrossReference getValueNFRAttributeCrossReference_0() { return cValueNFRAttributeCrossReference_0; }

		//QualifiedName
		public RuleCall getValueNFRAttributeQualifiedNameParserRuleCall_0_1() { return cValueNFRAttributeQualifiedNameParserRuleCall_0_1; }
	}
	
	
	private AdaptationModelElements pAdaptationModel;
	private ImportElements pImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private RuleElements pRule;
	private ConditionElements pCondition;
	private MeasurementComparisonElements pMeasurementComparison;
	private OPERATORElements pOPERATOR;
	private LOGICAL_OPERATORElements pLOGICAL_OPERATOR;
	private MATH_OPERATORElements pMATH_OPERATOR;
	private AVGElements pAVG;
	private MINElements pMIN;
	private MAXElements pMAX;
	private AtomicActionElements pAtomicAction;
	private QueryActionElements pQueryAction;
	private SelectActionElements pSelectAction;
	private DeselectActionElements pDeselectAction;
	private ModifyAttributeElements pModifyAttribute;
	private AttributeValueElements pAttributeValue;
	private StringAttributeValueElements pStringAttributeValue;
	private NFRAttributeValueElements pNFRAttributeValue;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AdaptationModelDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.rra.adaptationModel.AdaptationModelDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AdaptationModel:
	//	imports+=Import* rules+=Rule*;
	public AdaptationModelElements getAdaptationModelAccess() {
		return (pAdaptationModel != null) ? pAdaptationModel : (pAdaptationModel = new AdaptationModelElements());
	}
	
	public ParserRule getAdaptationModelRule() {
		return getAdaptationModelAccess().getRule();
	}

	////terminal VALUE returns ecore::EString: '"' ('0'..'9' | 'a'..'z' | '0'..'9' '.' '0'..'9')+'"';
	////terminal AND             returns ecore::EString: 'AND';
	////terminal OR              returns ecore::EString:  'OR' ;
	////terminal IF              returns ecore::EString: 'if';
	////terminal ELSE            returns ecore::EString: 'else';
	////terminal THEN            returns ecore::EString: 'then';
	////terminal RULE_TERMINAL   returns ecore::EString: 'rule';
	////terminal SELECT          returns ecore::EString: 'select feature';
	////terminal DESELECT        returns ecore::EString: 'deselect feature';
	////terminal CHANGE          returns ecore::EString: 'change feature attribute';
	////terminal WITH            returns ecore::EString: 'with';
	////terminal IMPORT_TERMINAL returns ecore::EString: 'import';
	////terminal AS              returns ecore::EString: 'as';
	////terminal SMALLER		 returns ecore::EString: '<';
	////terminal BIGGER			 returns ecore::EString: '>';
	////terminal EQUAL		     returns ecore::EString: '==';
	////terminal NOT_EQUAL		returns ecore::EString: '<>'
	////terminal SELECT_WHERE    returns ecore::EString: 'select feature * where';
	////terminal FROM 		   returns ecore::EString: 'from';
	//Import:
	//	"import" importURI= //AS name=ID
	//	STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Rule:
	//	"rule" name=ID ":" "if" condition+=Condition "then" atomicAction+=AtomicAction+ ("else" ("if" condition+=Condition
	//	"then")* atomicAction+=AtomicAction+)*;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Condition:
	//	measurementComparison+=MeasurementComparison;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//MeasurementComparison:
	//	measurement=[cdmModel::ContextDependentMeasurement|QualifiedName] OPERATOR STRING LOGICAL_OPERATOR?;
	public MeasurementComparisonElements getMeasurementComparisonAccess() {
		return (pMeasurementComparison != null) ? pMeasurementComparison : (pMeasurementComparison = new MeasurementComparisonElements());
	}
	
	public ParserRule getMeasurementComparisonRule() {
		return getMeasurementComparisonAccess().getRule();
	}

	////Condition:
	////	measurement=[ cdmModel::ContextDependentMeasurement|QualifiedName ] OPERATOR STRING 
	////	(LOGICAL_OPERATOR meas+=[Import] OPERATOR STRING)*  
	////;
	//OPERATOR:
	//	"<" | ">" | "==" | "<>";
	public OPERATORElements getOPERATORAccess() {
		return (pOPERATOR != null) ? pOPERATOR : (pOPERATOR = new OPERATORElements());
	}
	
	public ParserRule getOPERATORRule() {
		return getOPERATORAccess().getRule();
	}

	//LOGICAL_OPERATOR:
	//	"AND" | "OR";
	public LOGICAL_OPERATORElements getLOGICAL_OPERATORAccess() {
		return (pLOGICAL_OPERATOR != null) ? pLOGICAL_OPERATOR : (pLOGICAL_OPERATOR = new LOGICAL_OPERATORElements());
	}
	
	public ParserRule getLOGICAL_OPERATORRule() {
		return getLOGICAL_OPERATORAccess().getRule();
	}

	//MATH_OPERATOR:
	//	"max" | "min" | "avg" | "count";
	public MATH_OPERATORElements getMATH_OPERATORAccess() {
		return (pMATH_OPERATOR != null) ? pMATH_OPERATOR : (pMATH_OPERATOR = new MATH_OPERATORElements());
	}
	
	public ParserRule getMATH_OPERATORRule() {
		return getMATH_OPERATORAccess().getRule();
	}

	//AVG:
	//	"AVG (" (measurement+=[Import] ",")+ ")";
	public AVGElements getAVGAccess() {
		return (pAVG != null) ? pAVG : (pAVG = new AVGElements());
	}
	
	public ParserRule getAVGRule() {
		return getAVGAccess().getRule();
	}

	//MIN:
	//	"MIN (" (measurement+=[Import] ",")+ ")";
	public MINElements getMINAccess() {
		return (pMIN != null) ? pMIN : (pMIN = new MINElements());
	}
	
	public ParserRule getMINRule() {
		return getMINAccess().getRule();
	}

	//MAX:
	//	"MAX (" (measurement+=[Import] ",")+ ")";
	public MAXElements getMAXAccess() {
		return (pMAX != null) ? pMAX : (pMAX = new MAXElements());
	}
	
	public ParserRule getMAXRule() {
		return getMAXAccess().getRule();
	}

	//AtomicAction:
	//	SelectAction | DeselectAction | ModifyAttribute | QueryAction;
	public AtomicActionElements getAtomicActionAccess() {
		return (pAtomicAction != null) ? pAtomicAction : (pAtomicAction = new AtomicActionElements());
	}
	
	public ParserRule getAtomicActionRule() {
		return getAtomicActionAccess().getRule();
	}

	//QueryAction:
	//	"select feature" "with" MATH_OPERATOR "attribute" STRING "from feature" feature=[featureModel::Feature];
	public QueryActionElements getQueryActionAccess() {
		return (pQueryAction != null) ? pQueryAction : (pQueryAction = new QueryActionElements());
	}
	
	public ParserRule getQueryActionRule() {
		return getQueryActionAccess().getRule();
	}

	////QueryAction:
	////SELECT_WHERE MATH_OPERATOR  
	////FROM feature+=[Import] 
	////(LOGICAL_OPERATOR SELECT WHERE mathOp+=MATH_OPERATOR FROM feature+=[Import])*
	////;
	//SelectAction:
	//	"select feature" feature=[featureModel::Feature];
	public SelectActionElements getSelectActionAccess() {
		return (pSelectAction != null) ? pSelectAction : (pSelectAction = new SelectActionElements());
	}
	
	public ParserRule getSelectActionRule() {
		return getSelectActionAccess().getRule();
	}

	//DeselectAction:
	//	"deselect feature" feature=[featureModel::Feature];
	public DeselectActionElements getDeselectActionAccess() {
		return (pDeselectAction != null) ? pDeselectAction : (pDeselectAction = new DeselectActionElements());
	}
	
	public ParserRule getDeselectActionRule() {
		return getDeselectActionAccess().getRule();
	}

	//ModifyAttribute:
	//	"set attribute" featureAttribute=[rtFeatureModel::CVAttribute] "with value" attributeValue+=AttributeValue;
	public ModifyAttributeElements getModifyAttributeAccess() {
		return (pModifyAttribute != null) ? pModifyAttribute : (pModifyAttribute = new ModifyAttributeElements());
	}
	
	public ParserRule getModifyAttributeRule() {
		return getModifyAttributeAccess().getRule();
	}

	//AttributeValue:
	//	StringAttributeValue | NFRAttributeValue;
	public AttributeValueElements getAttributeValueAccess() {
		return (pAttributeValue != null) ? pAttributeValue : (pAttributeValue = new AttributeValueElements());
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}

	//StringAttributeValue:
	//	value=STRING;
	public StringAttributeValueElements getStringAttributeValueAccess() {
		return (pStringAttributeValue != null) ? pStringAttributeValue : (pStringAttributeValue = new StringAttributeValueElements());
	}
	
	public ParserRule getStringAttributeValueRule() {
		return getStringAttributeValueAccess().getRule();
	}

	//NFRAttributeValue:
	//	value=[rtFeatureModel::NFRAttribute|QualifiedName];
	public NFRAttributeValueElements getNFRAttributeValueAccess() {
		return (pNFRAttributeValue != null) ? pNFRAttributeValue : (pNFRAttributeValue = new NFRAttributeValueElements());
	}
	
	public ParserRule getNFRAttributeValueRule() {
		return getNFRAttributeValueAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
