[*
 * Robotics Runtime Adaptation Toolchain
 * 
 * Copyright (c) 2014
 * All rights reserved.
 * 
 * Luca Gherardi
 * Instititute for Dynamic Systems and Control
 * ETH Zurich
 * 
 * Nico Hochgeschwender
 * Department of Computer Science
 * Bonn-Rhine-Sieg University of Applied Sciences
 * 
 * ***********************************************************************************************
 * 
 * Authors: 
 *    <A HREF="mailto:lucagh@ethz.ch">Luca Gherardi</A>
 *    <A HREF="mailto:nico.hochgeschwender@h-brs.de">Nico Hochgeschwender</A>
 * 
 * 
 * ***********************************************************************************************
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * 
 *]
[%
var amHelper = new Native("org.rra.adaptationModel.m2t.tools.AdaptationEngineTools");
%]	
package [%=adaptationModel.outputPackage%];

import org.ros.concurrent.CancellableLoop;
import org.apache.commons.logging.Log;
import org.ros.message.MessageListener;
import org.ros.namespace.GraphName;
import org.ros.node.AbstractNodeMain;
import org.ros.node.ConnectedNode;
import org.ros.node.NodeMain;
import org.ros.node.topic.Subscriber;

import org.rra.adaptationEngine.api.*;


public class [%=adaptationModel.name%] extends AbstractNodeMain {

  final AdaptationEngine adaptationEngine;

  [%  
  var cdms : Set := amHelper.getROSRequiredCDMs(adaptationModel);

  for(measurement in cdms) {
  var subName : String := measurement.name;
  var subMsg : String := measurement.inputDataType /*.msgs_package*/ + "." + measurement.inputDataType /*.name*/ ;
  %]
  final [%=subMsg%] [%=subName%]Variable;
  [%
  }
  %]

  @Override
  public GraphName getDefaultNodeName() {
    return GraphName.of("rosjava/[%=adaptationModel.name%]");
  }

  @Override
  public void onStart(ConnectedNode connectedNode) {
    
    final Log log = connectedNode.getLog();
    
    [%
    var cdms : Set := amHelper.getROSRequiredCDMs(adaptationModel);

	for(measurement in cdms) {
	var subName : String := measurement.name;
	var subMsg : String := measurement.inputDataType /*.msgs_package*/ + "." + measurement.inputDataType /*.name*/ ;
	%]
	Subscriber<std_msgs.String> [%=subName%]Subscriber = connectedNode.newSubscriber("[%=subName%]", [%=subMsg%]._TYPE);
    [%=subName%]Subscriber.addMessageListener(new MessageListener<[%=subMsg%]>() {
      @Override
      public void onNewMessage([%=subMsg%] message) {
        [%=subName%]Variable.setData(message.getData());
      }
    });
    
	[%
	}
	%]
    
    connectedNode.executeCancellableLoop(new CancellableLoop() {
      private int loopCount;

      @Override
      protected void setup() {
        loopCount = 0;
      }

      @Override
      protected void loop() throws InterruptedException {
        loopCount ++;
        log.info("Adaptation Engine - Loop:"  + loopCount");
        Thread.sleep([%=adaptationModel.period%]);
      }
    });

  }

}


